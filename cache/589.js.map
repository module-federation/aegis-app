{"version":3,"sources":["webpack://aegis-app/./src/domain/utils.js"],"names":["compose","funcs","initVal","reduceRight","val","func","composeAsync","then","Promise","resolve","asyncPipe","obj","reduce","o","f","passwd","process","env","ENCRYPTION_PWD","algo","key","crypto","String","iv","Buffer","alloc","encrypt","text","cipher","encrypted","update","decrypt","cipherText","console","log","decipher","decrypted","hash","data","digest","uuid","nanoid","makeArray","v","Array","isArray","makeObject","prop","p","c","async","promise","result","ok","object","asObject","asArray","error"],"mappings":"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","file":"589.js","sourcesContent":["'use strict'\n\nimport crypto from 'crypto'\nimport { nanoid } from 'nanoid'\n\nexport function compose (...funcs) {\n  return function (initVal) {\n    return funcs.reduceRight((val, func) => func(val), initVal)\n  }\n}\n\nexport function composeAsync (...funcs) {\n  return function (initVal) {\n    return funcs.reduceRight(\n      (val, func) => val.then(func),\n      Promise.resolve(initVal)\n    )\n  }\n}\n\n/**\n * @callback pipeFn\n * @param {object} obj - the object to compose\n * @returns {object} - the composed object\n */\n\n/**\n * @param {pipeFn} func\n */\nexport const asyncPipe = (...func) => obj =>\n  func.reduce((o, f) => o.then(f), Promise.resolve(obj))\n\nconst passwd = process.env.ENCRYPTION_PWD\nconst algo = 'aes-192-cbc'\nconst key = crypto.scryptSync(String(passwd), 'salt', 24)\nconst iv = Buffer.alloc(16, 0)\n\nexport function encrypt (text) {\n  const cipher = crypto.createCipheriv(algo, key, iv)\n  let encrypted = cipher.update(text, 'utf8', 'hex')\n  encrypted += cipher.final('hex')\n  return encrypted\n}\n\nexport function decrypt (cipherText) {\n  console.log('decrypt(%s)', cipherText)\n  const decipher = crypto.createDecipheriv(algo, key, iv)\n  let decrypted = decipher.update(cipherText, 'hex', 'utf8')\n  decrypted += decipher.final('utf8')\n  return decrypted\n}\n\nexport function hash (data) {\n  return crypto\n    .createHash('sha1')\n    .update(data)\n    .digest('hex')\n}\n\nexport function uuid () {\n  // return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n  //   (c ^ (crypto.randomBytes(16)[0] & (15 >> (c / 4)))).toString(16)\n  // );\n  return nanoid()\n}\n\nexport function makeArray (v) {\n  return Array.isArray(v) ? v : [v]\n}\n\nexport function makeObject (prop) {\n  if (Array.isArray(prop)) {\n    return prop.reduce((p, c) => ({ ...p, ...c }))\n  }\n  return prop\n}\n\n/**\n *\n * @param {Promise<{\n * ok:()=>any,\n *\n * }} promise\n * @returns\n */\nexport function async (promise) {\n  return promise\n    .then(result => ({\n      ok: true,\n      object: result,\n      asObject: () => makeObject(result),\n      asArray: () => makeArray(result)\n    }))\n    .catch(error => {\n      console.error(error)\n      return Promise.resolve({ ok: false, error })\n    })\n}\n"],"sourceRoot":""}