{"version":3,"sources":["webpack://aegis-app/./src/adapters/datasources/datasource-mongodb.js","webpack://aegis-app/./src/config/index.js","webpack://aegis-app/./src/config/order.js","webpack://aegis-app/./src/config/webswitch.js","webpack://aegis-app/./src/domain/bind-adapters.js","webpack://aegis-app/./src/domain/index.js","webpack://aegis-app/./src/domain/webswitch.js"],"names":["getSecret","process","env","MONGODB_CREDS","user","pass","token","archive","id","console","debug","DataSourceAdapterMongoDb","url","cacheSize","DataSourceMongoDb","DataSourceMongoDbArchive","datasource","factory","name","creds","Order","modelName","endpoint","makeOrderFactory","domain","baseClass","dependencies","uuid","nanoid","mixins","requireProperties","requiredForGuest","requiredForApproval","requiredForCompletion","freezeProperties","freezeOnApproval","freezeOnCompletion","updateProperties","propKey","update","recalcTotal","updateSignature","validateProperties","values","Object","OrderStatus","isValid","statusChangeValid","maxnum","orderTotalValid","regex","validate","validateModel","onDelete","readyToDelete","eventHandlers","handleOrderEvent","ports","listen","service","type","timeout","notify","validateAddress","keys","producesEvent","disabled","authorizePayment","consumesEvent","undo","cancelPayment","pickOrder","callback","orderPicked","returnInventory","circuitBreaker","portTimeout_pickOrder_order","callVolume","errorRate","intervalMs","shipOrder","orderShipped","returnShipment","portTimeout_shipOrder_order","portRetryFailed_order","fallbackFn","cancel","trackShipment","verifyDelivery","returnDelivery","completePayment","paymentCompleted","refundPayment","cancelShipment","cancelOrders","methods","approveOrders","trackAsyncContext","customHttpStatus","testContainsMany","runFibonacciJs","relations","customer","foreignKey","desc","inventory","arrayKey","chat","routes","path","get","req","res","listModels","writable","serialize","query","post","log","addModel","body","result","status","json","message","ctx","context","OrderError","patch","editModel","params","changes","commands","decrypt","command","acl","approve","runFibonacci","model","start","Date","now","fibonacci","x","param","parseFloat","Number","isNaN","time","serializers","on","key","value","enabled","WebSwitch","makeClient","internal","serviceLocatorInit","serviceLocatorAsk","serviceLocatorAnswer","websocketConnect","websocketPing","websocketSend","websocketClose","websocketStatus","websocketTerminate","websocketOnClose","websocketOnOpen","websocketOnMessage","websocketOnError","websocketOnPong","makeAdapters","adapters","services","map","port","e","warn","reduce","p","c","validateSpec","spec","missing","filter","length","Error","entries","makeModel","concat","GlobalMixins","bindAdapters","models","modelSpecs","HOSTNAME","SERVICENAME","HBEATTIMEOUT","WSOCKETERROR","isPrimary","test","SWITCH","isBackup","BACKUP","DEBUG","heartbeatMs","sslEnabled","SSL_ENABLED","clearPort","PORT","cipherPort","SSL_PORT","activePort","activeProto","activeHost","DOMAIN","os","proto","SWITCH_PROTO","SWITCH_PORT","host","SWITCH_HOST","override","SWITCH_OVERRIDE","apiProto","apiUrl","serviceUrl","ServiceMeshClient","mesh","pong","heartbeatTimer","headers","pid","eventName","hostname","role","telemetry","memoryUsage","cpuUsage","performance","nodeTiming","listServices","socketState","primary","backup","options","binary","resolveUrl","agent","protocol","useBinary","send","heartbeat","setTimeout","sendQueuedMsgs","missingEventName","emit","listeners","forEach","listener","error","fn","connect","code","reason","msg","toString","clearTimeout","once","sent","enqueue","queueDepth","dequeue","save","removeAllListeners","EventEmitter","client","sendQueue","sendQueueMax","push","shift","getClient","publish","event","subscribe","handler","close"],"mappings":"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","file":"829.js","sourcesContent":["'use strict'\n\nfunction getSecret () {\n  return process.env.MONGODB_CREDS || { user: null, pass: null, token: null }\n}\n\nfunction archive (id) {\n  console.debug('mock archive', id)\n}\n\n/**\n * Datasource adapter factory.\n * @param {string} url database url\n * @param {number} [cacheSize] number of models to keep in cache\n * @param {*} DataSource base class that enables caching\n * @returns {import(\"./datasource\").default}\n */\nexport const DataSourceAdapterMongoDb = function (\n  url,\n  cacheSize,\n  DataSourceMongoDb\n) {\n  /**\n   * MongoDB adapter extends in-memory datasource to support caching.\n   * The cache is always updated first, which allows the system to run\n   * even when the database is offline.\n   */\n  class DataSourceMongoDbArchive extends DataSourceMongoDb {\n    constructor (datasource, factory, name) {\n      super(datasource, factory, name)\n      this.url = url\n      this.cacheSize = cacheSize\n      this.creds = getSecret()\n    }\n\n    /**\n     * @override\n     */\n    delete (id) {\n      console.debug('archive', id)\n      archive(id)\n    }\n  }\n\n  return DataSourceMongoDbArchive\n}\n","export * from './webswitch' // always export this\nexport * from './order'\n// export * from './inventory'\n// export * from './customer'\n\n// export * from './user'\n// export * from './query-engine'\n// export * from './dam-api'\n// export * from './ticket-master'\n// export * from './access-controller'\n","'use strict'\n\nimport {\n  makeOrderFactory,\n  readyToDelete,\n  handleOrderEvent,\n  orderShipped,\n  paymentCompleted,\n  OrderStatus,\n  recalcTotal,\n  requiredForCompletion,\n  statusChangeValid,\n  freezeOnApproval,\n  freezeOnCompletion,\n  orderTotalValid,\n  returnInventory,\n  returnShipment,\n  refundPayment,\n  returnDelivery,\n  cancelPayment,\n  updateSignature,\n  requiredForGuest,\n  requiredForApproval,\n  approve,\n  cancel,\n  accountOrder,\n  OrderError,\n  orderPicked\n} from '../domain/order'\n\nimport {\n  requireProperties,\n  freezeProperties,\n  updateProperties,\n  validateProperties,\n  validateModel,\n  allowProperties\n} from '../domain/mixins'\nimport { nanoid } from 'nanoid'\nimport { DataSourceAdapterMongoDb } from '../adapters/datasources/datasource-mongodb'\n\n/**\n * @type {import('../domain/index').ModelSpecification}\n */\nexport const Order = {\n  modelName: 'order',\n  endpoint: 'orders',\n  factory: makeOrderFactory,\n  domain: 'order',\n  datasource: {\n    factory: DataSourceAdapterMongoDb,\n    url: 'mongodb://127.0.0.1:27017',\n    cacheSize: 4000,\n    baseClass: 'DataSourceMongoDb'\n  },\n  dependencies: { uuid: () => nanoid(8) },\n  mixins: [\n    requireProperties(\n      'orderItems',\n      requiredForGuest([\n        'lastName',\n        'firstName',\n        'billingAddress',\n        'shippingAddress',\n        'creditCardNumber',\n        'email'\n      ]),\n      requiredForApproval('paymentStatus'),\n      requiredForCompletion('proofOfDelivery')\n    ),\n    freezeProperties(\n      'orderNo',\n      'customerId',\n      freezeOnApproval([\n        'email',\n        'lastName',\n        'firstName',\n        'orderItems',\n        'orderTotal',\n        'billingAddress',\n        'shippingAddress',\n        'creditCardNumber',\n        'paymentStatus'\n      ]),\n      freezeOnCompletion('*')\n    ),\n    updateProperties([\n      {\n        propKey: 'orderItems',\n        update: recalcTotal\n      },\n      {\n        propKey: 'orderItems',\n        update: updateSignature\n      }\n    ]),\n    validateProperties([\n      {\n        propKey: 'orderStatus',\n        values: Object.values(OrderStatus),\n        isValid: statusChangeValid\n      },\n      {\n        propKey: 'orderTotal',\n        maxnum: 99999.99,\n        isValid: orderTotalValid\n      },\n      {\n        propKey: 'email',\n        regex: 'email'\n      },\n      {\n        propKey: 'creditCardNumber',\n        regex: 'creditCard'\n      },\n      {\n        propKey: 'phone',\n        regex: 'phone'\n      }\n    ])\n    // allowProperties([fibonacci, time, result])\n  ],\n  validate: validateModel,\n  onDelete: readyToDelete,\n  eventHandlers: [handleOrderEvent],\n  ports: {\n    listen: {\n      service: 'Event',\n      type: 'outbound',\n      timeout: 0\n    },\n    notify: {\n      service: 'Event',\n      type: 'outbound',\n      timeout: 0\n    },\n    validateAddress: {\n      service: 'Address',\n      type: 'outbound',\n      keys: 'shippingAddress',\n      producesEvent: 'addressValidated',\n      disabled: true\n    },\n    authorizePayment: {\n      service: 'Payment',\n      type: 'outbound',\n      keys: 'paymentStatus',\n      consumesEvent: 'startWorkflow',\n      producesEvent: 'paymentAuthorized',\n      undo: cancelPayment,\n      disabled: true\n    },\n    pickOrder: {\n      service: 'Inventory',\n      type: 'outbound',\n      keys: 'pickupAddress',\n      callback: orderPicked,\n      consumesEvent: 'itemsAvailable',\n      producesEvent: 'orderPicked',\n      undo: returnInventory,\n      circuitBreaker: {\n        portTimeout_pickOrder_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 5000\n        }\n      }\n    },\n    shipOrder: {\n      service: 'Shipping',\n      type: 'outbound',\n      callback: orderShipped,\n      consumesEvent: 'orderPicked',\n      producesEvent: 'orderShipped',\n      undo: returnShipment,\n      circuitBreaker: {\n        portTimeout_shipOrder_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 60000\n        },\n        portRetryFailed_order: {\n          callVolume: 3,\n          errorRate: 2,\n          intervalMs: 60000,\n          fallbackFn: cancel\n        },\n        default: {\n          callVolume: 3,\n          errorRate: 3,\n          intervalMs: 60000\n        }\n      }\n    },\n    trackShipment: {\n      service: 'Shipping',\n      type: 'outbound',\n      keys: ['trackingStatus', 'trackingId'],\n      consumesEvent: 'orderShipped',\n      producesEvent: 'orderDelivered',\n      circuitBreaker: {\n        portRetryFailed_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 60000\n        }\n      }\n    },\n    verifyDelivery: {\n      service: 'Shipping',\n      type: 'outbound',\n      keys: 'proofOfDelivery',\n      consumesEvent: 'orderDelivered',\n      producesEvent: 'deliveryVerified',\n      undo: returnDelivery\n    },\n    completePayment: {\n      service: 'Payment',\n      type: 'outbound',\n      callback: paymentCompleted,\n      consumesEvent: 'deliveryVerified',\n      producesEvent: 'orderComplete',\n      undo: refundPayment\n    },\n    cancelShipment: {\n      service: 'Shipping',\n      type: 'outbound'\n    },\n    refundPayment: {\n      service: 'Payment',\n      type: 'outbound'\n    },\n    cancelOrders: {\n      service: 'Order',\n      type: 'inbound',\n      timeout: 0,\n      methods: ['post']\n    },\n    approveOrders: {\n      service: 'Order',\n      type: 'inbound',\n      timeout: 0,\n      methods: ['patch']\n    },\n    trackAsyncContext: {\n      service: 'Telemetry',\n      type: 'inbound',\n      timeout: 0\n    },\n    customHttpStatus: {\n      service: 'Telemetry',\n      type: 'inbound',\n      timeout: 0\n    },\n    testContainsMany: {\n      service: 'Inventory',\n      type: 'inbound',\n      timeout: 0\n    },\n    runFibonacciJs: {\n      service: 'Test',\n      type: 'inbound',\n      timeout: 0\n    }\n  },\n  relations: {\n    customer: {\n      modelName: 'customer',\n      type: 'manyToOne',\n      foreignKey: 'customerId',\n      desc: 'Many orders per customer, just one customer per order'\n    },\n    inventory: {\n      modelName: 'inventory',\n      type: 'containsMany',\n      foreignKey: 'itemId',\n      arrayKey: 'orderItems',\n      desc: 'An order contains a list of inventory items to ship.'\n    },\n    chat: {\n      modelName: 'user',\n      type: 'custom',\n      foreignKey: 'userId',\n      desc: 'A custom relation used for integrated chat'\n    }\n  },\n  routes: [\n    {\n      path: '/orders',\n      get: async (req, res, ports) =>\n        ports.listModels({\n          writable: res,\n          serialize: true,\n          query: req.query\n        }),\n\n      post: async (req, res, ports) => {\n        console.log('/orders')\n        try {\n          const result = await ports.addModel(req.body)\n          res\n            .status(200)\n            .json({ message: 'ok', ctx: result.context, id: result.id })\n        } catch (error) {\n          throw new OrderError(error, 404)\n        }\n      }\n    },\n    {\n      path: '/orders/:id',\n      get: async (req, res, ports) =>\n        ports.listModels({\n          writable: res,\n          serialize: true,\n          query: req.query\n        }),\n\n      patch: async (req, res, ports) => {\n        console.log('/orders/:id')\n        try {\n          const result = await ports.editModel({\n            id: req.params.id,\n            changes: req.body\n          })\n          res.status(200).json({ message: 'ok', ctx: result.context })\n        } catch (error) {\n          throw new OrderError(error, 404)\n        }\n      }\n    }\n  ],\n  commands: {\n    decrypt: {\n      command: 'decrypt',\n      acl: ['read', 'decrypt']\n    },\n    approve: {\n      command: approve,\n      acl: ['write', 'approve']\n    },\n    cancel: {\n      command: cancel,\n      acl: ['write', 'cancel']\n    },\n    runFibonacci: {\n      command: model => {\n        const start = Date.now()\n        function fibonacci (x) {\n          if (x === 0) {\n            return 0\n          }\n          if (x === 1) {\n            return 1\n          }\n          return fibonacci(x - 1) + fibonacci(x - 2)\n        }\n        const param = parseFloat(model.fibonacci)\n        return {\n          result: fibonacci(Number.isNaN(param) ? 10 : param),\n          time: Date.now() - start\n        }\n      },\n      acl: ['read', 'write']\n    }\n  },\n  serializers: [\n    {\n      on: 'deserialize',\n      key: 'creditCardNumber',\n      type: 'string',\n      value: (key, value) => decrypt(value),\n      enabled: false\n    },\n    {\n      on: 'deserialize',\n      key: 'shippingAddress',\n      type: 'string',\n      value: (key, value) => decrypt(value),\n      enabled: false\n    }\n    // {\n    //   on: 'deserialize',\n    //   key: 'billingAddress',\n    //   type: 'string',\n    //   value: (key, value) => decrypt(value),\n    //   enabled: false\n    // }\n  ]\n}\n","'use strict'\n\nimport { makeClient } from '../domain/webswitch'\n\n/**\n * @type {import('../domain').ModelSpecification}\n */\nexport const WebSwitch = {\n  modelName: 'webswitch',\n  endpoint: 'service-mesh',\n  factory: makeClient,\n  internal: true,\n  ports: {\n    serviceLocatorInit: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    serviceLocatorAsk: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    serviceLocatorAnswer: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketConnect: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketPing: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketSend: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketClose: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketStatus: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketTerminate: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnClose: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnOpen: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnMessage: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnError: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnPong: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    }\n  }\n}\n","'use strict'\n\nexport default function makeAdapters (ports, adapters, services) {\n  if (!ports || !adapters) {\n    return\n  }\n  return Object.keys(ports)\n    .map(port => {\n      if (!adapters[port]) {\n        return\n      }\n\n      try {\n        return {\n          [port]: adapters[port](services[ports[port].service])\n        }\n      } catch (e) {\n        console.warn(e.message)\n      }\n    })\n    .reduce((p, c) => ({ ...p, ...c }))\n}\n","'use strict'\n\n/**\n * @typedef {string} eventName\n */\n\n/**\n * @typedef  Model\n * @property {string} _Symbol_id - immutable/private uuid\n * @property {string} _Symbol_modelName - immutable/private name\n * @property {string} _Symbol_createTime - immutable/private createTime\n * @property {onUpdate} _Symbol_onUpdate - immutable/private update function\n * @property {onDelete} _Symbol_onDelete\n * @property {function(Object)} update - use this function to update model\n * specify changes in an object\n * @property {function()} toJSON - de/serialization logic\n * @property {function(eventName,function(eventName,Model):void)} addListener listen for domain events\n * @property {function(eventName,Model):Promise<void>} emit emit domain event\n * @property {function(function():Promise<Model>):Promise<Model>} [port] - when a\n * port is configured, the framework generates a function to invoke it. When data\n * arrives on the port, depending on the implementation, the port's adapter invokes\n * the callback specified in the port configuration, or as an argument to the port\n * function. The callback returns an updated Model, and control is returned to the\n * caller. Optionally, an event is fired to trigger the next port function to run\n * @property {function():Promise<any>} [relation] - when you configure a relation,\n * the framework generates a function that your code can call to run the query\n * @property {function(*):*} [command] - the framework will call any model method\n * you specify when passed as a parameter or query in an API call.\n */\n\n/**\n * @callback onUpdate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onDelete\n * @param {Model} model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback validate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onLoad\n * @param {Model} savedModel rehydrated model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @typedef {string} service - name of the service object to inject in adapter\n * @typedef {number} timeout - call to adapter will timeout after `timeout` milliseconds\n *\n * @typedef {{\n *  [x: string]: {\n *    service: service,\n *    timeout?: timeout,\n *    callback?: function({model: Model})\n *    errorCallback?: function({model: Model, port: string, error:Error}),\n *    timeoutCallback?: function({model: Model, port: string}),\n *    consumesEvent?:string,\n *    producesEvent?:string,\n *    type?:'inbound'|'outbound',\n *    disabled?: boolean,\n *    adapter?: string,\n *    circuitBreaker?: thresholds\n *  }\n * }} ports - input/output ports for the domain\n */\n\n/**\n * @typedef {{\n *  [x:string]: {\n *    errorRate:number\n *    callVolume:number,\n *    intervalMs:number,\n *    fallbackFn:function()\n *  },\n * }} thresholds - thresholds for different errors\n */\n\n/**\n * @typedef {{\n *  [x: string]: {\n *    modelName:string,\n *    type:\"oneToMany\"|\"oneToOne\"|\"manyToOne\",\n *    foreignKey:any,\n *  }\n * }} relations - define related domain entities\n *\n * @typedef {Array<function({\n *  eventName:string,\n *  eventType:string,\n *  eventTime:string,\n *  modelName:string,\n *  model:Model\n * }):Promise<void>>} eventHandler - callbacks invoked to handle domain and\n * application events\n */\n\n/**\n *\n * @typedef {string} key\n * @typedef {*} value\n */\n\n/**\n * @typedef {{\n *  on: \"serialize\" | \"deserialize\",\n *  key: string | RegExp | \"*\" | (function(key,value):boolean)\n *  type: \"string\" | \"object\" | \"number\" | \"function\" | \"any\" | (function(key,value):boolean)\n *  value(key, value):value\n * }} serializer\n */\n/**\n * @typedef {{\n *  [x:string]: {\n *    allow:string|function(*):boolean|Array<string|function(*):boolean>\n *    deny:string|function(*):boolean|Array<string|function(*):boolean>\n *    type:\"role\"|\"relation\"|\"command\"\n *    desc?:string\n *  }\n * }} accessControlList\n */\n/**\n * @typedef {{\n *  [x: string]: {\n *    command:string|function(Model):Promise<any>,\n *    acl:accessControlList[]\n *  }\n * }} commands - configure functions to execute when specified in a\n * URL parameter or query of the auto-generate REST API\n */\n/**\n * @callback controller\n * @param {Request} req\n * @param {Response} res\n */\n\n/**\n * @typedef {{\n *  [path: string]: {\n *    get?: controller,\n *    post?: controller,\n *    patch?: controller,\n *    delete?:controller\n *   }\n * }} endpoints\n */\n\n/**\n * @callback modelSpecFactoryFn\n * @param {object} dependencies\n * @returns {function(...args):Readonly<object>}\n */\n\n/**\n * @typedef {object} ModelSpecification Specify domain model properties and functions\n * @property {string} modelName name of model (case-insenstive)\n * @property {string} endpoint URI reference (e.g. plural of `modelName` noun)\n * @property {modelSpecFactoryFn} factory returns factory function that creates the model instance\n * @property {object} [dependencies] injected into the model for inverted dependency/control\n * @property {Array<import(\"./mixins\").functionalMixin>} [mixins] - use functional mixins\n * to compose the object from common domain logic, like input validation.\n * @property {onUpdate} [onUpdate] - Function called to handle update requests. Called\n * before save.\n * @property {onDelete} [onDelete] - Function called before deletion.\n * @property {validate} [validate] - called to validate model updates\n * @property {ports} [ports] - input/output ports for the domain\n * @property {eventHandler[]} [eventHandlers] - callbacks invoked to handle CRUD events\n * @property {serializer[]} [serializers] - use for custom de/serialization of the model\n * when reading or writing to storage or network\n * @property {relations} [relations] - create related models or query in aggregate\n * @property {commands} [commands] - define functions to execute when specified in a\n * URL parameter or query of the auto-generated REST API\n * @property {accessControlList} [accessControlList] - configure authorization\n * @property {endpoints} [routes] - additional custom API endpoints - specify inbound port\n * @property {{factory:import(\"../adapters/datasources/datasource-mongodb\"),url:string,credentials?:string}} [datasource] - custom datasource\n * for this model. If not set, the default set by the server is used.\n *\n */\n\n/**\n * @callback addModel\n * @param {{ searchTerm1, searchTerm2, searchTermN }} input\n * @returns {Promise<Model>}\n */\n\n/**\n * @callback editModel\n * @param {{ id:string, changes:object }} input\n * @returns { Promise<Model> }\n */\n\n/**\n * @callback findModel\n * @param {{ id:string, query:object }} input\n * @returns { Promise<Model> }\n */\n\n/**\n * @callback findRelatedModels\n * @param {{ query:object, relation:string }} input\n * @returns { Promise<{Model,[Model]}> }\n */\n\n/**\n * @callback listModels\n * @param {{ query:object }} input e.g. { searchTerm1 : 'val', ...etc }\n * @returns { [Promise<Model>] }\n */\n\n/**\n * @callback executeCommand\n * @param {{ id:string }} input\n * @returns { Model }\n */\n\n/**\n * @typedef DomainPortAPI\n * @property { addModel } addModel\n * @property { editModel } editModel\n * @property { listModels } listModels\n * @property { findModel } findModel\n * @property { findRelatedModels } findModel\n * @property { removeModel } removeModel\n * @property { executeCommand } executeCommand\n */\n\nimport GlobalMixins from './mixins'\nimport bindAdapters from './bind-adapters'\n\n// Service dependencies\nimport * as services from '../services'\nimport * as adapters from '../adapters'\nimport * as ports from '../domain/ports'\n// Models\nimport * as modelSpecs from '../config'\n\n/**\n *\n * @param {ModelSpecification} spec\n */\nfunction validateSpec (spec) {\n  const missing = ['modelName', 'endpoint', 'factory'].filter(key => !spec[key])\n  if (missing?.length > 0) {\n    throw new Error(\n      `missing properties: ${missing}, spec: ${Object.entries(spec)}`\n    )\n  }\n}\n\n/**\n * @param {ModelSpecification} spec\n * @param {*} dependencies - services injected\n */\nfunction makeModel (spec) {\n  validateSpec(spec)\n  const mixins = spec.mixins || []\n  const dependencies = spec.dependencies || {}\n  return {\n    ...spec,\n    mixins: mixins.concat(GlobalMixins),\n    dependencies: {\n      ...dependencies,\n      ...bindAdapters(spec.ports, adapters, services)\n    }\n  }\n}\n\nexport const models = Object.values(modelSpecs).map(spec => makeModel(spec))\n","/**\n * webswitch (c)\n *\n * Websocket clients connect to a common ws server,\n * called a webswitch. When a client sends a message,\n * webswitch broadcasts the message to all other\n * connected clients, including a special webswitch\n * server that acts as an uplink to another network,\n * if one is defined. A Webswitch server can also\n * receive messgages from an uplink and will broadcast\n * those messages to its clients as well.\n */\n\n'use strict'\n\nimport os from 'os'\nimport EventEmitter from 'events'\nimport { nanoid } from 'nanoid'\n\nconst HOSTNAME = 'webswitch.local'\nconst SERVICENAME = 'webswitch'\nconst HBEATTIMEOUT = 'heartBeatTimeout'\nconst WSOCKETERROR = 'webSocketError'\n\nconst isPrimary = /true/i.test(process.env.SWITCH)\nconst isBackup = /true/i.test(process.env.BACKUP)\nconst debug = /true/i.test(process.env.DEBUG)\nconst heartbeatMs = 10000\nconst sslEnabled = /true/i.test(process.env.SSL_ENABLED)\nconst clearPort = process.env.PORT || 80\nconst cipherPort = process.env.SSL_PORT || 443\nconst activePort = sslEnabled ? cipherPort : clearPort\nconst activeProto = sslEnabled ? 'wss' : 'ws'\nconst activeHost = process.env.DOMAIN || os.hostname()\nconst proto = isPrimary ? activeProto : process.env.SWITCH_PROTO\nconst port = isPrimary ? activePort : process.env.SWITCH_PORT\nconst host = isPrimary ? activeHost : process.env.SWITCH_HOST\nconst override = /true/i.test(process.env.SWITCH_OVERRIDE)\nconst apiProto = sslEnabled ? 'https' : 'http'\nconst apiUrl = `${apiProto}://${activeHost}:${activePort}`\n\nfunction serviceUrl () {\n  const url = `${proto}://${host}:${port}`\n  if (proto && host && port) return url\n  if (isPrimary) throw new Error(`invalid url ${url}`)\n  return null\n}\n\n/**\n * Service mesh client impl. Uses websocket and service-locator\n * adapters through ports injected into the {@link mesh} model.\n * Cf. modelSpec by the same name, i.e. `webswitch`.\n */\nexport class ServiceMeshClient extends EventEmitter {\n  constructor (mesh) {\n    super('webswitch')\n    this.url\n    this.mesh = mesh\n    this.name = SERVICENAME\n    this.isPrimary = isPrimary\n    this.isBackup = isBackup\n    this.pong = true\n    this.heartbeatTimer = 3000\n    this.headers = {\n      'x-webswitch-host': os.hostname(),\n      'x-webswitch-role': 'node',\n      'x-webswitch-pid': process.pid\n    }\n  }\n\n  /**\n   *\n   * @param {number} asyncId id's instance to kill\n   * @returns {{telemetry:{mem:number,cpu:number}}}\n   */\n  telemetry () {\n    return {\n      eventName: 'telemetry',\n      proto: this.name,\n      apiUrl,\n      heartbeatMs,\n      hostname: os.hostname(),\n      role: 'node',\n      pid: process.pid,\n      telemetry: {\n        ...process.memoryUsage(),\n        ...process.cpuUsage(),\n        ...performance.nodeTiming\n      },\n      services: this.mesh.listServices(),\n      socketState: this.mesh.websocketStatus() || 'undefined'\n    }\n  }\n\n  /**\n   * Zero-config, self-forming mesh network:\n   * Discover URL of broker to connect to, or\n   * if this is the broker, cast the local url\n   * @returns {Promise<string>} url\n   */\n  async resolveUrl () {\n    await this.mesh.serviceLocatorInit({\n      serviceUrl: serviceUrl(),\n      name: this.name,\n      primary: this.isPrimary,\n      backup: this.isBackup\n    })\n    if (this.isPrimary) {\n      await this.mesh.serviceLocatorAnswer()\n      return serviceUrl()\n    }\n    return override ? serviceUrl() : this.mesh.serviceLocatorAsk()\n  }\n\n  /**\n   * Use multicast dns to resolve broker url. Connect to\n   * service mesh broker. Allow listeners to subscribe to\n   * indivdual or all events. Send binary messages with\n   * protocol and idempotentency headers. Periodically send\n   * telemetry data.\n   *\n   * @param {*} options\n   * @returns\n   */\n  async connect (options = { binary: true }) {\n    this.options = options\n    this.url = await this.resolveUrl()\n\n    this.mesh.websocketConnect(this.url, {\n      agent: false,\n      headers: this.headers,\n      protocol: SERVICENAME,\n      useBinary: options.binary\n    })\n\n    this.mesh.websocketOnOpen(() => {\n      console.log('connection open')\n      this.send(this.telemetry())\n      this.heartbeat()\n      setTimeout(() => this.sendQueuedMsgs(), 3000)\n    })\n\n    this.mesh.websocketOnMessage(message => {\n      if (!message.eventName) {\n        debug && console.debug({ missingEventName: message })\n        this.emit('missingEventName', message)\n        return\n      }\n      try {\n        this.emit(message.eventName, message)\n        this.listeners('*').forEach(listener => listener(message))\n      } catch (error) {\n        console.error({ fn: this.connect.name, error })\n      }\n    })\n\n    this.mesh.websocketOnError(error => {\n      this.emit(WSOCKETERROR, error)\n      console.error({ fn: this.connect.name, error })\n    })\n\n    this.mesh.websocketOnClose((code, reason) => {\n      console.log({\n        msg: 'received close frame',\n        code,\n        reason: reason?.toString()\n      })\n      clearTimeout(this.heartbeatTimer)\n      setTimeout(() => {\n        console.debug('reconnect due to socket close')\n        this.connect()\n      }, 5000)\n    })\n\n    this.mesh.websocketOnPong(() => (this.pong = true))\n    this.once('timeout', this.timeout)\n  }\n\n  timeout () {\n    console.warn('timeout')\n    this.emit(HBEATTIMEOUT, this.telemetry())\n    this.mesh.websocketTerminate()\n    setTimeout(() => {\n      console.debug('reconnect due to timeout')\n      this.connect()\n    }, 5000)\n  }\n\n  heartbeat () {\n    if (this.pong) {\n      this.pong = false\n      this.mesh.websocketPing()\n      this.heartbeatTimer = setTimeout(() => this.heartbeat(), heartbeatMs)\n    } else {\n      clearTimeout(this.heartbeatTimer)\n      this.emit('timeout')\n    }\n  }\n\n  /**\n   * Convert message to binary and send with protocol and idempotency headers.\n   * If message cannot be sent because of connection state or buffering queue\n   * message in domain object for retry later. Using a domain object ensures\n   * persistence of the queue across boots.\n   *\n   * @param {object} msg\n   * @returns {Promise<boolean>} true if sent, false if not\n   */\n  send (msg) {\n    const sent = this.mesh.websocketSend(msg, {\n      headers: {\n        ...this.headers,\n        'idempotency-key': nanoid()\n      }\n    })\n    if (sent) return true\n    this.mesh.enqueue(msg)\n    return false\n  }\n\n  /**\n   * Send any messages buffered in `sendQueue`.\n   */\n  sendQueuedMsgs () {\n    let sent = true\n    while (this.mesh.queueDepth() > 0 && sent)\n      sent = this.send(this.mesh.dequeue())\n  }\n\n  /**\n   * Sends message to mesh broker service.\n   * @param {*} msg\n   */\n  publish (msg) {\n    return this.send(msg)\n  }\n\n  /**\n   * Register handler to fire on event\n   * @param {string} eventName\n   * @param {function()} callback\n   */\n  subscribe (eventName, callback) {\n    this.on(eventName, callback)\n  }\n\n  /**\n   * A new object will be created on system reload.\n   * Dispose of the old one. Run in context to\n   * distinguish between the new and old instance.\n   *\n   * @param {*} code\n   * @param {*} reason\n   */\n  async close (code, reason) {\n    console.debug('closing socket')\n    await this.mesh.save() // save queued messages\n    this.removeAllListeners()\n    this.mesh.websocketClose(code, reason)\n  }\n}\n\n/**\n * Domain model factory function. This model is\n * used internally by the Aegis framework as a\n * pluggable service mesh client. Implement the\n * the methods below to create a new plugin.\n *\n * @param {*} dependencies injected depedencies\n * @returns\n */\nexport function makeClient (dependencies) {\n  let client\n  return function ({ listServices }) {\n    return {\n      listServices,\n      sendQueue: [],\n      sendQueueMax: 1000,\n\n      queueDepth () {\n        return this.sendQueue.length\n      },\n\n      enqueue (msg) {\n        this.sendQueue.push(msg)\n      },\n\n      dequeue () {\n        return this.sendQueue.shift()\n      },\n\n      getClient () {\n        if (client) return client\n        client = new ServiceMeshClient(this)\n        return client\n      },\n\n      async connect (options) {\n        this.getClient().connect(options)\n      },\n\n      async publish (event) {\n        this.getClient().publish(event)\n      },\n\n      subscribe (eventName, handler) {\n        this.getClient().subscribe(eventName, handler)\n      },\n\n      async close (code, reason) {\n        this.getClient().close(code, reason)\n      }\n    }\n  }\n}\n"],"sourceRoot":""}