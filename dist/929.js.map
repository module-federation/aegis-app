{"version":3,"sources":["webpack://aegis-app/./src/adapters/datasources/datasource-adapter-customer.js","webpack://aegis-app/./src/adapters/datasources/datasource-adapter-file.js","webpack://aegis-app/./src/adapters/datasources/datasource-mongodb.js","webpack://aegis-app/./src/domain/config/customer.js","webpack://aegis-app/./src/domain/config/index.js","webpack://aegis-app/./src/domain/config/inventory.js","webpack://aegis-app/./src/domain/config/order.js","webpack://aegis-app/./src/domain/config/todo.js","webpack://aegis-app/./src/domain/config/webswitch.js","webpack://aegis-app/./src/domain/index.js","webpack://aegis-app/./src/domain/models/inventory.js","webpack://aegis-app/./src/domain/models/todo.js","webpack://aegis-app/./src/domain/models/webswitch.js","webpack://aegis-app/./src/domain/util/bind-adapters.js"],"names":["DataSourceAdapterCustomer","url","cacheSize","DataSourceFile","DataSourceCustomer","_DataSourceFile","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","save","id","data","_get","_getPrototypeOf","prototype","call","DataSourceAdapterCustomFile","DataSourceCustomFile","list","options","serialize","_typeof","obj","Symbol","iterator","constructor","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","subClass","superClass","create","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","Reflect","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","getSecret","process","env","MONGODB_CREDS","user","pass","token","archive","console","debug","DataSourceAdapterMongoDb","DataSourceMongoDb","DataSourceMongoDbArchive","_DataSourceMongoDb","datasource","factory","name","_this","creds","_delete","Customer","modelName","endpoint","dependencies","uuid","nanoid","makeCustomerFactory","validate","validateModel","onDelete","okToDelete","mixins","freezeProperties","requireProperties","validateProperties","propKey","regex","relations","orders","type","foreignKey","commands","decrypt","command","acl","runFibonacci","model","start","Date","now","fibonacci","x","param","parseFloat","isNaN","time","ports","runFibonacciCust","service","timeout","doesFieldExist","accessControlList","customer","allow","desc","Inventory","makeInventoryFactory","maxnum","values","categories","assetTypes","isValid","_obj","prop","every","properties","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","err","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","Order","makeOrderFactory","domain","requiredForGuest","requiredForApproval","requiredForCompletion","freezeOnApproval","freezeOnCompletion","updateProperties","update","recalcTotal","updateSignature","OrderStatus","statusChangeValid","orderTotalValid","readyToDelete","eventHandlers","handleOrderEvent","listen","notify","validateAddress","producesEvent","disabled","authorizePayment","consumesEvent","undo","cancelPayment","pickOrder","callback","orderPicked","returnInventory","circuitBreaker","portTimeout_pickOrder_order","callVolume","errorRate","intervalMs","shipOrder","orderShipped","returnShipment","portTimeout_shipOrder_order","portRetryFailed_order","fallbackFn","cancel","trackShipment","verifyDelivery","returnDelivery","completePayment","paymentCompleted","refundPayment","cancelShipment","cancelOrders","methods","approveOrders","trackAsyncContext","customHttpStatus","testContainsMany","runFibonacciJs","getFieldList","createModelEvent","inventory","arrayKey","routes","path","get","_callee","req","_callee$","_context","listModels","query","_x","_x2","_x3","post","_post","_callee2","_callee2$","_context2","createModel","body","status","json","message","ctx","t0","OrderError","_x4","_x5","_x6","_get2","_callee3","_callee3$","_context3","findModel","params","_x7","_x8","_x9","patch","_patch","_callee4","_callee4$","_context4","editModel","changes","_x10","_x11","_x12","_delete2","_callee5","_callee5$","_context5","removeModel","_x13","_x14","_x15","approve","serializers","on","enabled","ToDo","makeToDoFactory","baseClass","WebSwitch","makeClient","internal","serviceLocatorInit","serviceLocatorAsk","serviceLocatorAnswer","websocketConnect","websocketPing","websocketSend","websocketClose","websocketStatus","websocketTerminate","websocketOnClose","websocketOnOpen","websocketOnMessage","websocketOnError","websocketOnPong","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","minLen","_arrayLikeToArray","n","toString","Array","from","test","len","arr2","_i","_s","_e","_r","_arr","_n","_d","isArray","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread","source","_defineProperty","getOwnPropertyDescriptors","defineProperties","validateSpec","spec","missing","concat","entries","makeModel","GlobalMixins","bindAdapters","adapters","services","models","modelSpecs","map","_ref","_ref2","k","v","category","price","discount","sku","purchaseOrder","vendor","inStock","assetType","quantity","freeze","toDoFactory","text","isComplete","HOSTNAME","SERVICENAME","HBEATTIMEOUT","WSOCKETERROR","isPrimary","SWITCH","isBackup","BACKUP","DEBUG","heartbeatMs","sslEnabled","SSL_ENABLED","clearPort","PORT","cipherPort","SSL_PORT","activePort","activeProto","activeHost","DOMAIN","os","proto","SWITCH_PROTO","port","SWITCH_PORT","host","SWITCH_HOST","override","SWITCH_OVERRIDE","apiProto","apiUrl","serviceUrl","ServiceMeshClient","_EventEmitter","mesh","pong","heartbeatTimer","headers","pid","telemetry","eventName","hostname","role","memoryUsage","cpuUsage","performance","nodeTiming","listServices","events","listEvents","socketState","_resolveUrl","primary","backup","resolveUrl","_connect","_this2","_args2","binary","agent","protocol","useBinary","log","send","heartbeat","setTimeout","sendQueuedMsgs","missingEventName","emit","listeners","listener","connect","code","reason","msg","clearTimeout","once","_this3","warn","_this4","enqueue","queueDepth","dequeue","publish","subscribe","_close","removeAllListeners","close","EventEmitter","client","sendQueue","sendQueueMax","shift","getClient","_this5","event","_this6","handler","_this7","_callee6","_callee6$","_context6","makeAdapters","reduce","c"],"mappings":"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","file":"929.js","sourcesContent":["export const DataSourceAdapterCustomer = function (\n  url,\n  cacheSize,\n  DataSourceFile\n) {\n  /**\n   * Datasource adapter for AWS Dynamo DB\n   */\n  class DataSourceCustomer extends DataSourceFile {\n    save (id, data) {\n      super.save(id, data)\n    }\n  }\n\n  return DataSourceCustomer\n}\n","export const DataSourceAdapterCustomFile = function (\n  url,\n  cacheSize,\n  DataSourceFile\n) {\n  /**\n   * Datasource adapter for AWS Dynamo DB\n   */\n  class DataSourceCustomFile extends DataSourceFile {\n    save (id, data) {\n      super.save(id, data)\n    }\n\n    list (options) {\n      return super.list(options)\n    }\n\n    serialize () {\n      return false\n    }\n  }\n\n  return DataSourceCustomFile\n}\n","'use strict'\n\nfunction getSecret () {\n  return process.env.MONGODB_CREDS || { user: null, pass: null, token: null }\n}\n\nfunction archive (id) {\n  console.debug('mock archive', id)\n}\n\n/**\n * Datasource adapter factory.\n * @param {string} url database url\n * @param {number} [cacheSize] number of models to keep in cache\n * @param {*} DataSource base class that enables caching\n * @returns {import(\"./datasource\").default}\n */\nexport const DataSourceAdapterMongoDb = function (\n  url,\n  cacheSize,\n  DataSourceMongoDb\n) {\n  /**\n   * MongoDB adapter extends in-memory datasource to support caching.\n   * The cache is always updated first, which allows the system to run\n   * even when the database is offline.\n   */\n  class DataSourceMongoDbArchive extends DataSourceMongoDb {\n    constructor (datasource, factory, name) {\n      super(datasource, factory, name)\n      this.url = url\n      this.cacheSize = cacheSize\n      this.creds = getSecret()\n    }\n\n    /**\n     * @override\n     */\n    delete (id) {\n      console.debug('archive', id)\n      archive(id)\n    }\n  }\n\n  return DataSourceMongoDbArchive\n}\n","'use strict'\n\nimport {\n  validateModel,\n  freezeProperties,\n  validateProperties,\n  requireProperties\n} from '../util/mixins'\nimport { makeCustomerFactory, okToDelete } from '../models/customer'\nimport { DataSourceAdapterMongoDb } from '../../adapters/datasources/datasource-mongodb'\nimport { nanoid } from 'nanoid'\nimport { DataSourceAdapterCustomer } from '../../adapters/datasources/datasource-adapter-customer'\n\n/**\n * @type {import('../domain/index').ModelSpecification}\n */\nexport const Customer = {\n  modelName: 'customer',\n  endpoint: 'customers',\n  dependencies: { uuid: () => nanoid(8) },\n  factory: makeCustomerFactory,\n  validate: validateModel,\n  onDelete: okToDelete,\n  // datasource: {\n  //   factory: DataSourceAdapterCustomer,\n  //   cacheSize: 4000,\n  //   baseClass: 'DataSourceFile'\n  // },\n  mixins: [\n    freezeProperties('customerId'),\n    requireProperties(\n      'firstName',\n      'lastName',\n      'email',\n      'shippingAddress',\n      'billingAddress',\n      'creditCardNumber'\n    ),\n    validateProperties([\n      {\n        propKey: 'email',\n        // unique: { encrypted: true },\n        regex: 'email'\n      },\n      {\n        propKey: 'creditCardNumber',\n        regex: 'creditCard'\n      }\n    ])\n  ],\n  relations: {\n    orders: {\n      modelName: 'order',\n      type: 'oneToMany',\n      foreignKey: 'customerId'\n    }\n  },\n  commands: {\n    decrypt: {\n      command: 'decrypt',\n      acl: ['read', 'decrypt']\n    },\n    runFibonacci: {\n      command: model => {\n        const start = Date.now()\n        function fibonacci (x) {\n          if (x === 0) {\n            return 0\n          }\n          if (x === 1) {\n            return 1\n          }\n          return fibonacci(x - 1) + fibonacci(x - 2)\n        }\n        const param = parseFloat(model.fibonacci)\n        return {\n          result: fibonacci(Number.isNaN(param) ? 10 : param),\n          time: Date.now() - start\n        }\n      },\n      acl: ['read', 'write']\n    }\n  },\n  ports: {\n    runFibonacciCust: {\n      service: 'customer',\n      type: 'inbound',\n      timeout: 0\n    },\n    doesFieldExist: {\n      service: 'customer',\n      type: 'inbound',\n      timeout: 0\n    }\n  },\n  accessControlList: {\n    customer: {\n      allow: 'read',\n      type: 'relation',\n      desc: 'Allow orders to see customers.'\n    }\n  }\n}\n","export * from './webswitch' // always export this\nexport * from './order'\nexport * from './customer'\nexport * from './inventory'\nexport * from './todo'\n// export * from './user'\n// export * from './query-engine'\n// export * from './dam-api'\n// export * from './ticket-master'\n// export * from './access-controller'\n","'use strict'\n\nimport { DataSourceAdapterMongoDb } from '../../adapters/datasources/datasource-mongodb'\nimport {\n  makeInventoryFactory,\n  assetTypes,\n  properties,\n  categories\n} from '../models/inventory'\n\nimport {\n  requireProperties,\n  freezeProperties,\n  validateProperties\n} from '../util/mixins'\n\n/**\n * @type {import(\"../domain/order\").ModelSpecification}\n */\nexport const Inventory = {\n  modelName: 'inventory',\n  endpoint: 'inventory',\n  dependencies: {},\n  factory: makeInventoryFactory,\n  // datasource: {\n  //   factory: DataSourceAdapterMongoDb,\n  //   url: 'mongodb://127.0.0.1:27017',\n  //   cacheSize: 4000,\n  //   baseClass: 'DataSourceMongoDb'\n  // },\n  mixins: [\n    requireProperties('name', 'inStock', 'category', 'price', 'purchaseOrder'),\n    validateProperties([\n      {\n        propKey: 'inStock',\n        typeof: 'number',\n        maxnum: 99999\n      },\n      {\n        propKey: 'category',\n        values: categories\n      },\n      {\n        propKey: 'assetType',\n        values: assetTypes\n      },\n      {\n        propKey: 'properties',\n        isValid: (_obj, prop) => prop.every(p => properties.includes(p))\n      },\n      {\n        propKey: 'price',\n        typeof: 'number',\n        maxnum: 999.99\n      }\n    ]),\n    freezeProperties('*')\n  ],\n  relations: {\n    orders: {\n      modelName: 'order',\n      type: 'oneToMany',\n      foreignKey: 'itemId',\n      desc: 'many items per order'\n    }\n  }\n}\n","'use strict'\n\nimport {\n  makeOrderFactory,\n  readyToDelete,\n  handleOrderEvent,\n  orderShipped,\n  paymentCompleted,\n  OrderStatus,\n  recalcTotal,\n  requiredForCompletion,\n  statusChangeValid,\n  freezeOnApproval,\n  freezeOnCompletion,\n  orderTotalValid,\n  returnInventory,\n  returnShipment,\n  refundPayment,\n  returnDelivery,\n  cancelPayment,\n  updateSignature,\n  requiredForGuest,\n  requiredForApproval,\n  approve,\n  cancel,\n  OrderError,\n  orderPicked\n} from '../models/order'\n\nimport {\n  requireProperties,\n  freezeProperties,\n  updateProperties,\n  validateProperties,\n  validateModel\n} from '../util/mixins'\n\nimport { nanoid } from 'nanoid'\nimport { DataSourceAdapterMongoDb } from '../../adapters/datasources/datasource-mongodb'\n\n/**\n * @type {import('../domain/index').ModelSpecification}\n */\nexport const Order = {\n  endpoint: 'orders',\n  factory: makeOrderFactory,\n  domain: 'order',\n  // datasource: {\n  //   factory: DataSourceAdapterMongoDb,\n  //   url: 'mongodb://127.0.0.1:27017',\n  //   cacheSize: 4000,\n  //   baseClass: 'DataSourceMongoDb'\n  // },\n  dependencies: { uuid: () => nanoid(8) },\n  mixins: [\n    requireProperties(\n      'orderItems',\n      requiredForGuest([\n        'lastName',\n        'firstName',\n        'billingAddress',\n        'shippingAddress',\n        'creditCardNumber',\n        'email'\n      ]),\n      requiredForApproval('paymentStatus'),\n      requiredForCompletion('proofOfDelivery')\n    ),\n    freezeProperties(\n      'orderNo',\n      'customerId',\n      freezeOnApproval([\n        'email',\n        'lastName',\n        'firstName',\n        'orderItems',\n        'orderTotal',\n        'billingAddress',\n        'shippingAddress',\n        'creditCardNumber',\n        'paymentStatus'\n      ]),\n      freezeOnCompletion('*')\n    ),\n    updateProperties([\n      {\n        propKey: 'orderItems',\n        update: recalcTotal\n      },\n      {\n        propKey: 'orderItems',\n        update: updateSignature\n      }\n    ]),\n    validateProperties([\n      {\n        propKey: 'orderStatus',\n        values: Object.values(OrderStatus),\n        isValid: statusChangeValid\n      },\n      {\n        propKey: 'orderTotal',\n        maxnum: 99999.99,\n        isValid: orderTotalValid\n      },\n      {\n        propKey: 'email',\n        regex: 'email'\n      },\n      {\n        propKey: 'creditCardNumber',\n        regex: 'creditCard'\n      },\n      {\n        propKey: 'phone',\n        regex: 'phone'\n      }\n    ])\n    // allowProperties([fibonacci, time, result])\n  ],\n  validate: validateModel,\n  onDelete: readyToDelete,\n  eventHandlers: [handleOrderEvent],\n  ports: {\n    listen: {\n      service: 'Event',\n      type: 'outbound',\n      timeout: 0\n    },\n    notify: {\n      service: 'Event',\n      type: 'outbound',\n      timeout: 0\n    },\n    validateAddress: {\n      service: 'Address',\n      type: 'outbound',\n      keys: 'shippingAddress',\n      producesEvent: 'addressValidated',\n      disabled: true\n    },\n    authorizePayment: {\n      service: 'Payment',\n      type: 'outbound',\n      keys: 'paymentStatus',\n      consumesEvent: 'startWorkflow',\n      producesEvent: 'paymentAuthorized',\n      undo: cancelPayment,\n      disabled: true\n    },\n    pickOrder: {\n      service: 'Inventory',\n      type: 'outbound',\n      keys: 'pickupAddress',\n      callback: orderPicked,\n      consumesEvent: 'itemsAvailable',\n      producesEvent: 'orderPicked',\n      undo: returnInventory,\n      circuitBreaker: {\n        portTimeout_pickOrder_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 5000\n        }\n      }\n    },\n    shipOrder: {\n      service: 'Shipping',\n      type: 'outbound',\n      callback: orderShipped,\n      consumesEvent: 'orderPicked',\n      producesEvent: 'orderShipped',\n      undo: returnShipment,\n      circuitBreaker: {\n        portTimeout_shipOrder_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 60000\n        },\n        portRetryFailed_order: {\n          callVolume: 3,\n          errorRate: 2,\n          intervalMs: 60000,\n          fallbackFn: cancel\n        },\n        default: {\n          callVolume: 3,\n          errorRate: 3,\n          intervalMs: 60000\n        }\n      }\n    },\n    trackShipment: {\n      service: 'Shipping',\n      type: 'outbound',\n      keys: ['trackingStatus', 'trackingId'],\n      consumesEvent: 'orderShipped',\n      producesEvent: 'orderDelivered',\n      circuitBreaker: {\n        portRetryFailed_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 60000\n        }\n      }\n    },\n    verifyDelivery: {\n      service: 'Shipping',\n      type: 'outbound',\n      keys: 'proofOfDelivery',\n      consumesEvent: 'orderDelivered',\n      producesEvent: 'deliveryVerified',\n      undo: returnDelivery\n    },\n    completePayment: {\n      service: 'Payment',\n      type: 'outbound',\n      callback: paymentCompleted,\n      consumesEvent: 'deliveryVerified',\n      producesEvent: 'orderComplete',\n      undo: refundPayment\n    },\n    cancelShipment: {\n      service: 'Shipping',\n      type: 'outbound'\n    },\n    refundPayment: {\n      service: 'Payment',\n      type: 'outbound'\n    },\n    cancelOrders: {\n      service: 'Order',\n      type: 'inbound',\n      timeout: 0,\n      methods: ['post']\n    },\n    approveOrders: {\n      service: 'Order',\n      type: 'inbound',\n      timeout: 0,\n      methods: ['patch']\n    },\n    trackAsyncContext: {\n      service: 'Telemetry',\n      type: 'inbound',\n      timeout: 0\n    },\n    customHttpStatus: {\n      service: 'Telemetry',\n      type: 'inbound',\n      timeout: 0\n    },\n    testContainsMany: {\n      service: 'Inventory',\n      type: 'inbound',\n      timeout: 0\n    },\n    runFibonacciJs: {\n      service: 'Test',\n      type: 'inbound',\n      timeout: 0\n    },\n    getFieldList: {\n      service: 'Test',\n      type: 'inbound',\n      timeout: 0\n    },\n    createModelEvent: {\n      service: 'Test',\n      type: 'inbound',\n      timeout: 0\n    }\n  },\n  relations: {\n    customer: {\n      modelName: 'customer',\n      type: 'manyToOne',\n      foreignKey: 'customerId',\n      desc: 'Many orders per customer, just one customer per order'\n    },\n    inventory: {\n      modelName: 'inventory',\n      type: 'containsMany',\n      foreignKey: 'itemId',\n      arrayKey: 'orderItems',\n      desc: 'An order contains a list of inventory items to ship.'\n    }\n  },\n  routes: [\n    {\n      path: '/orders',\n      get: async (req, res, ports) =>\n        ports.listModels({\n          writable: res,\n          query: req.query\n        }),\n\n      post: async (req, res, ports) => {\n        try {\n          const result = await ports.createModel(req.body)\n          res\n            .status(200)\n            .json({ message: 'ok', ctx: result.context, id: result.id })\n        } catch (error) {\n          throw new OrderError(error, 404)\n        }\n      }\n    },\n    {\n      path: '/orders/:id',\n      get: async (req, res, ports) => ports.findModel(req.params.id),\n      patch: async (req, res, ports) => {\n        try {\n          const result = await ports.editModel({\n            id: req.params.id,\n            changes: req.body\n          })\n          res.status(200).json({ message: 'ok', ctx: result.context })\n        } catch (error) {\n          throw new OrderError(error, 404)\n        }\n      },\n      delete: async (req, res, ports) => {\n        ports.removeModel(req.params.id)\n        res.status(200).json({ message: 'ok' })\n      }\n    }\n  ],\n  commands: {\n    decrypt: {\n      command: 'decrypt',\n      acl: ['read', 'decrypt']\n    },\n    approve: {\n      command: approve,\n      acl: ['write', 'approve']\n    },\n    cancel: {\n      command: cancel,\n      acl: ['write', 'cancel']\n    },\n    runFibonacci: {\n      command: model => {\n        const start = Date.now()\n        function fibonacci (x) {\n          if (x === 0) {\n            return 0\n          }\n          if (x === 1) {\n            return 1\n          }\n          return fibonacci(x - 1) + fibonacci(x - 2)\n        }\n        const param = parseFloat(model.fibonacci)\n        return {\n          result: fibonacci(Number.isNaN(param) ? 10 : param),\n          time: Date.now() - start\n        }\n      },\n      acl: ['read', 'write']\n    }\n  },\n  serializers: [\n    {\n      on: 'deserialize',\n      key: 'creditCardNumber',\n      type: 'string',\n      value: (key, value) => decrypt(value),\n      enabled: false\n    },\n    {\n      on: 'deserialize',\n      key: 'shippingAddress',\n      type: 'string',\n      value: (key, value) => decrypt(value),\n      enabled: false\n    }\n    // {\n    //   on: 'deserialize',\n    //   key: 'billingAddress',\n    //   type: 'string',\n    //   value: (key, value) => decrypt(value),\n    //   enabled: false\n    // }\n  ]\n}\n","'use strict'\n\nimport { DataSourceAdapterCustomFile } from '../../adapters/datasources/datasource-adapter-file'\nimport { makeToDoFactory } from '../models/todo'\nimport { nanoid } from 'nanoid'\n\n/**\n * @type {import('../index').ModelSpecification}\n */\nexport const ToDo = {\n  modelName: 'todo',\n  endpoint: 'todo',\n  dependencies: { uuid: nanoid },\n  factory: makeToDoFactory,\n  datasource: {\n    factory: DataSourceAdapterCustomFile,\n    cacheSize: 4000,\n    baseClass: 'DataSourceFile'\n  }\n}\n","'use strict'\n\nimport { makeClient } from '../models/webswitch'\n\n/**\n * @type {import('../domain').ModelSpecification}\n */\nexport const WebSwitch = {\n  modelName: 'webswitch',\n  endpoint: 'appfabric',\n  factory: makeClient,\n  internal: true,\n  ports: {\n    serviceLocatorInit: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    serviceLocatorAsk: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    serviceLocatorAnswer: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketConnect: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketPing: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketSend: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketClose: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketStatus: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketTerminate: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnClose: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnOpen: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnMessage: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnError: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnPong: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    }\n  }\n}\n","'use strict'\n\n/**\n * @typedef {string} eventName\n */\n\n/**\n * @typedef  Model\n * @property {string} _Symbol_id - immutable/private uuid\n * @property {string} _Symbol_modelName - immutable/private name\n * @property {string} _Symbol_createTime - immutable/private createTime\n * @property {onUpdate} _Symbol_onUpdate - immutable/private update function\n * @property {onDelete} _Symbol_onDelete\n * @property {function(Object)} update - use this function to update model\n * specify changes in an object\n * @property {function()} toJSON - de/serialization logic\n * @property {function(eventName,function(eventName,Model):void)} addListener listen for domain events\n * @property {function(eventName,Model):Promise<void>} emit emit domain event\n * @property {function(function():Promise<Model>):Promise<Model>} [port] - when a\n * port is configured, the framework generates a function to invoke it. When data\n * arrives on the port, depending on the implementation, the port's adapter invokes\n * the callback specified in the port configuration, or as an argument to the port\n * function. The callback returns an updated Model, and control is returned to the\n * caller. Optionally, an event is fired to trigger the next port function to run\n * @property {function():Promise<any>} [relation] - when you configure a relation,\n * the framework generates a function that your code can call to run the query\n * @property {function(*):*} [command] - the framework will call any model method\n * you specify when passed as a parameter or query in an API call.\n */\n\n/**\n * @callback onUpdate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onDelete\n * @param {Model} model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback validate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onLoad\n * @param {Model} savedModel rehydrated model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @typedef {string} service - name of the service object to inject in adapter\n * @typedef {number} timeout - call to adapter will timeout after `timeout` milliseconds\n *\n * @typedef {{\n *  [x: string]: {\n *    service: service,\n *    timeout?: timeout,\n *    callback?: function({model: Model})\n *    errorCallback?: function({model: Model, port: string, error:Error}),\n *    timeoutCallback?: function({model: Model, port: string}),\n *    consumesEvent?:string,\n *    producesEvent?:string,\n *    type?:'inbound'|'outbound',\n *    disabled?: boolean,\n *    adapter?: string,\n *    circuitBreaker?: thresholds\n *  }\n * }} ports - input/output ports for the domain\n */\n\n/**\n * @typedef {{\n *  [x:string]: {\n *    errorRate:number\n *    callVolume:number,\n *    intervalMs:number,\n *    fallbackFn:function()\n *  },\n * }} thresholds - thresholds for different errors\n */\n\n/**\n * @typedef {{\n *  [x: string]: {\n *    modelName:string,\n *    type:\"oneToMany\"|\"oneToOne\"|\"manyToOne\",\n *    foreignKey:any,\n *  }\n * }} relations - define related domain entities\n *\n * @typedef {Array<function({\n *  eventName:string,\n *  eventType:string,\n *  eventTime:string,\n *  modelName:string,\n *  model:Model\n * }):Promise<void>>} eventHandler - callbacks invoked to handle domain and\n * application events\n */\n\n/**\n *\n * @typedef {string} key\n * @typedef {*} value\n */\n\n/**\n * @typedef {{\n *  on: \"serialize\" | \"deserialize\",\n *  key: string | RegExp | \"*\" | (function(key,value):boolean)\n *  type: \"string\" | \"object\" | \"number\" | \"function\" | \"any\" | (function(key,value):boolean)\n *  value(key, value):value\n * }} serializer\n */\n/**\n * @typedef {{\n *  [x:string]: {\n *    allow:string|function(*):boolean|Array<string|function(*):boolean>\n *    deny:string|function(*):boolean|Array<string|function(*):boolean>\n *    type:\"role\"|\"relation\"|\"command\"\n *    desc?:string\n *  }\n * }} accessControlList\n */\n/**\n * @typedef {{\n *  [x: string]: {\n *    command:string|function(Model):Promise<any>,\n *    acl:accessControlList[]\n *  }\n * }} commands - configure functions to execute when specified in a\n * URL parameter or query of the auto-generate REST API\n */\n/**\n * @callback controller\n * @param {Request} req\n * @param {Response} res\n */\n\n/**\n * @typedef {{\n *  [path: string]: {\n *    get?: controller,\n *    post?: controller,\n *    patch?: controller,\n *    delete?:controller\n *   }\n * }} endpoints\n */\n\n/**\n * @callback modelSpecFactoryFn\n * @param {object} dependencies\n * @returns {function(...args):Readonly<object>}\n */\n\n/**\n * @typedef {object} ModelSpecification Specify domain model properties and functions\n * @property {string} modelName name of model (case-insenstive)\n * @property {string} endpoint URI reference (e.g. plural of `modelName` noun)\n * @property {modelSpecFactoryFn} factory returns factory function that creates the model instance\n * @property {object} [dependencies] injected into the model for inverted dependency/control\n * @property {Array<import(\"./util/mixins\").functionalMixin>} [mixins] - use functional mixins\n * to compose the object from common domain logic, like input validation.\n * @property {onUpdate} [onUpdate] - Function called to handle update requests. Called\n * before save.\n * @property {onDelete} [onDelete] - Function called before deletion.\n * @property {validate} [validate] - called to validate model updates\n * @property {ports} [ports] - input/output ports for the domain\n * @property {eventHandler[]} [eventHandlers] - callbacks invoked to handle CRUD events\n * @property {serializer[]} [serializers] - use for custom de/serialization of the model\n * when reading or writing to storage or network\n * @property {relations} [relations] - create related models or query in aggregate\n * @property {commands} [commands] - define functions to execute when specified in a\n * URL parameter or query of the auto-generated REST API\n * @property {accessControlList} [accessControlList] - configure authorization\n * @property {endpoints} [routes] - additional custom API endpoints - specify inbound port\n * @property {{factory:import(\"../adapters/datasources/datasource-mongodb\"),url:string,credentials?:string}} [datasource] - custom datasource\n * for this model. If not set, the default set by the server is used.\n *\n */\n\n/**\n * @callback addModel\n * @param {{ searchTerm1, searchTerm2, searchTermN }} input\n * @returns {Promise<Model>}\n */\n\n/**\n * @callback editModel\n * @param {{ id:string, changes:object }} input\n * @returns { Promise<Model> }\n */\n\n/**\n * @callback findModel\n * @param {{ id:string, query:object }} input\n * @returns { Promise<Model> }\n */\n\n/**\n * @callback findRelatedModels\n * @param {{ query:object, relation:string }} input\n * @returns { Promise<{Model,[Model]}> }\n */\n\n/**\n * @callback listModels\n * @param {{ query:object }} input e.g. { searchTerm1 : 'val', ...etc }\n * @returns { [Promise<Model>] }\n */\n\n/**\n * @callback executeCommand\n * @param {{ id:string }} input\n * @returns { Model }\n */\n\n/**\n * @typedef DomainPortAPI\n * @property { addModel } addModel\n * @property { editModel } editModel\n * @property { listModels } listModels\n * @property { findModel } findModel\n * @property { findRelatedModels } findModel\n * @property { removeModel } removeModel\n * @property { executeCommand } executeCommand\n */\n\nimport GlobalMixins from './util/mixins'\nimport bindAdapters from './util/bind-adapters'\n\n// Service dependencies\nimport * as services from '../services'\nimport * as adapters from '../adapters'\nimport * as ports from './ports'\n// Models\nimport * as modelSpecs from './config'\n\n/**\n *\n * @param {ModelSpecification} spec\n */\nfunction validateSpec (spec) {\n  const missing = ['endpoint', 'factory'].filter(key => !spec[key])\n  if (missing?.length > 0) {\n    throw new Error(\n      `missing properties: ${missing}, spec: ${Object.entries(spec)}`\n    )\n  }\n}\n\n/**\n * @param {ModelSpecification} spec\n * @param {*} dependencies - services injected\n */\nfunction makeModel (spec) {\n  validateSpec(spec)\n  const mixins = spec.mixins || []\n  const dependencies = spec.dependencies || {}\n  return {\n    ...spec,\n    mixins: mixins.concat(GlobalMixins),\n    dependencies: {\n      ...dependencies,\n      ...bindAdapters(spec.ports, adapters, services)\n    }\n  }\n}\n\nexport const models = Object.entries(modelSpecs).map(([k, v]) =>\n  makeModel({ ...v, modelName: k })\n)\n","'use strict'\n\nexport const assetTypes = ['rotating-asset', 'spare-part']\nexport const properties = ['height', 'length', 'width', 'weight', 'color']\nexport const categories = ['home', 'auto', 'business']\n\nexport const makeInventoryFactory = dependencies => ({\n  category,\n  properties,\n  price,\n  discount,\n  name,\n  desc,\n  sku,\n  purchaseOrder,\n  vendor,\n  inStock,\n  assetType,\n  quantity\n}) =>\n  Object.freeze({\n    category,\n    properties,\n    price: price - (discount || 0.0),\n    name,\n    desc,\n    sku,\n    purchaseOrder,\n    vendor,\n    inStock,\n    assetType,\n    quantity\n  })\n","'use strict'\n\nexport function makeToDoFactory (dependencies) {\n  return function toDoFactory ({ text, isComplete }) {\n    return Object.freeze({\n      id: dependencies.uuid(),\n      text,\n      isComplete: isComplete || false\n    })\n  }\n}                                                                                                                                                                                                                              \n","/**\n * webswitch (c)\n *\n * Websocket clients connect to a common ws server,\n * called a webswitch. When a client sends a message,\n * webswitch broadcasts the message to all other\n * connected clients, including a special webswitch\n * server that acts as an uplink to another network,\n * if one is defined. A Webswitch server can also\n * receive messgages from an uplink and will broadcast\n * those messages to its clients as well.\n */\n\n'use strict'\n\nimport os from 'os'\nimport EventEmitter from 'events'\nimport { nanoid } from 'nanoid'\n\nconst HOSTNAME = 'webswitch.local'\nconst SERVICENAME = 'webswitch'\nconst HBEATTIMEOUT = 'heartBeatTimeout'\nconst WSOCKETERROR = 'webSocketError'\n\nconst isPrimary = /true/i.test(process.env.SWITCH)\nconst isBackup = /true/i.test(process.env.BACKUP)\nconst debug = /true/i.test(process.env.DEBUG)\nconst heartbeatMs = 10000\nconst sslEnabled = /true/i.test(process.env.SSL_ENABLED)\nconst clearPort = process.env.PORT || 80\nconst cipherPort = process.env.SSL_PORT || 443\nconst activePort = sslEnabled ? cipherPort : clearPort\nconst activeProto = sslEnabled ? 'wss' : 'ws'\nconst activeHost = process.env.DOMAIN || os.hostname()\nconst proto = isPrimary ? activeProto : process.env.SWITCH_PROTO\nconst port = isPrimary ? activePort : process.env.SWITCH_PORT\nconst host = isPrimary ? activeHost : process.env.SWITCH_HOST\nconst override = /true/i.test(process.env.SWITCH_OVERRIDE)\nconst apiProto = sslEnabled ? 'https' : 'http'\nconst apiUrl = `${apiProto}://${activeHost}:${activePort}`\n\nfunction serviceUrl () {\n  const url = `${proto}://${host}:${port}`\n  if (proto && host && port) return url\n  if (isPrimary) throw new Error(`invalid url ${url}`)\n  return null\n}\n\n/**\n * Service mesh client impl. Uses websocket and service-locator\n * adapters through ports injected into the {@link mesh} model.\n * Cf. modelSpec by the same name, i.e. `webswitch`.\n */\nexport class ServiceMeshClient extends EventEmitter {\n  /**\n   * The model is passed as the only arg.\n   *\n   * @param {import('../../domain').Model} mesh the domain model\n   */\n  constructor (mesh) {\n    super('webswitch')\n    this.url\n    this.mesh = mesh\n    this.name = SERVICENAME\n    this.isPrimary = isPrimary\n    this.isBackup = isBackup\n    this.pong = true\n    this.heartbeatTimer = 3000\n    this.headers = {\n      'x-webswitch-host': os.hostname(),\n      'x-webswitch-role': 'node',\n      'x-webswitch-pid': process.pid\n    }\n  }\n\n  /**\n   *\n   * @param {number} asyncId id's instance to kill\n   * @returns {{telemetry:{mem:number,cpu:number}}}\n   */\n  telemetry () {\n    return {\n      eventName: 'telemetry',\n      proto: this.name,\n      apiUrl,\n      heartbeatMs,\n      hostname: os.hostname(),\n      role: 'node',\n      pid: process.pid,\n      telemetry: {\n        ...process.memoryUsage(),\n        ...process.cpuUsage(),\n        ...performance.nodeTiming\n      },\n      services: this.mesh.listServices(),\n      events: this.mesh.listEvents(),\n      socketState: this.mesh.websocketStatus() || 'undefined'\n    }\n  }\n\n  /**\n   * Zero-config, self-forming mesh network:\n   * Discover URL of broker to connect to, or\n   * if this is the broker, cast the local url\n   * @returns {Promise<string>} url\n   */\n  async resolveUrl () {\n    await this.mesh.serviceLocatorInit({\n      serviceUrl: serviceUrl(),\n      name: this.name,\n      primary: this.isPrimary,\n      backup: this.isBackup\n    })\n    if (this.isPrimary) {\n      await this.mesh.serviceLocatorAnswer()\n      return serviceUrl()\n    }\n    return override ? serviceUrl() : this.mesh.serviceLocatorAsk()\n  }\n\n  /**\n   * Use multicast dns to resolve broker url. Connect to\n   * service mesh broker. Allow listeners to subscribe to\n   * indivdual or all events. Send binary messages with\n   * protocol and idempotentency headers. Periodically send\n   * telemetry data.\n   *\n   * @param {*} options\n   * @returns\n   */\n  async connect (options = { binary: true }) {\n    this.options = options\n    this.url = await this.resolveUrl()\n\n    this.mesh.websocketConnect(this.url, {\n      agent: false,\n      headers: this.headers,\n      protocol: SERVICENAME,\n      useBinary: options.binary\n    })\n\n    this.mesh.websocketOnOpen(() => {\n      console.log('connection open')\n      this.send(this.telemetry())\n      this.heartbeat()\n      setTimeout(() => this.sendQueuedMsgs(), 3000)\n    })\n\n    this.mesh.websocketOnMessage(message => {\n      if (!message.eventName) {\n        debug && console.debug({ missingEventName: message })\n        this.emit('missingEventName', message)\n        return\n      }\n      try {\n        this.emit(message.eventName, message)\n        this.listeners('*').forEach(listener => listener(message))\n      } catch (error) {\n        console.error({ fn: this.connect.name, error })\n      }\n    })\n\n    this.mesh.websocketOnError(error => {\n      this.emit(WSOCKETERROR, error)\n      console.error({ fn: this.connect.name, error })\n    })\n\n    this.mesh.websocketOnClose((code, reason) => {\n      console.log({\n        msg: 'received close frame',\n        code,\n        reason: reason?.toString()\n      })\n      clearTimeout(this.heartbeatTimer)\n      setTimeout(() => {\n        console.debug('reconnect due to socket close')\n        this.connect()\n      }, 5000)\n    })\n\n    this.mesh.websocketOnPong(() => (this.pong = true))\n    this.once('timeout', this.timeout)\n  }\n\n  timeout () {\n    console.warn('timeout')\n    this.emit(HBEATTIMEOUT, this.telemetry())\n    this.mesh.websocketTerminate()\n    setTimeout(() => {\n      console.debug('reconnect due to timeout')\n      this.connect()\n    }, 5000)\n  }\n\n  heartbeat () {\n    if (this.pong) {\n      this.pong = false\n      this.mesh.websocketPing()\n      this.heartbeatTimer = setTimeout(() => this.heartbeat(), heartbeatMs)\n    } else {\n      clearTimeout(this.heartbeatTimer)\n      this.emit('timeout')\n    }\n  }\n\n  /**\n   * Convert message to binary and send with protocol and idempotency headers.\n   * If message cannot be sent because of connection state or buffering queue\n   * message in domain object for retry later. Using a domain object ensures\n   * persistence of the queue across boots.\n   *\n   * @param {object} msg\n   * @returns {Promise<boolean>} true if sent, false if not\n   */\n  send (msg) {\n    const sent = this.mesh.websocketSend(msg, {\n      headers: {\n        ...this.headers,\n        'idempotency-key': nanoid()\n      }\n    })\n    if (sent) return true\n    this.mesh.enqueue(msg)\n    return false\n  }\n\n  /**\n   * Send any messages buffered in `sendQueue`.\n   */\n  sendQueuedMsgs () {\n    let sent = true\n    while (this.mesh.queueDepth() > 0 && sent)\n      sent = this.send(this.mesh.dequeue())\n  }\n\n  /**\n   * Sends message to mesh broker service.\n   * @param {*} msg\n   */\n  publish (msg) {\n    return this.send(msg)\n  }\n\n  /**\n   * Register handler to fire on event\n   * @param {string} eventName\n   * @param {function()} callback\n   */\n  subscribe (eventName, callback) {\n    this.on(eventName, callback)\n  }\n\n  /**\n   * A new object will be created on system reload.\n   * Dispose of the old one. Run in context to\n   * distinguish between the new and old instance.\n   *\n   * @param {*} code\n   * @param {*} reason\n   */\n  async close (code, reason) {\n    console.debug('closing socket')\n    await this.mesh.save() // save queued messages\n    this.removeAllListeners()\n    this.mesh.websocketClose(code, reason)\n  }\n}\n\n/**\n * @typedef {{\n *   senderQueue:string[],\n *   queueDepth:function():number,\n *   connect:function(),\n *   close:function(),\n *   publish(object),\n *   enqueue:function(string),\n *   dequeue:function(),\n *   subscribe:function(string,function())\n * }} serviceMeshIface\n */\n\n/**\n * Domain model factory function. This model is\n * used internally by the Aegis framework as a\n * pluggable service mesh client. Implement the\n * the methods below to create a new plugin.\n *\n * @param {*} dependencies injected depedencies\n * @returns {function({function():string[],function():string[]}):serviceMeshIface}\n */\nexport function makeClient (dependencies) {\n  let client\n  return function ({ listServices, listEvents }) {\n    return {\n      /**@type {function():string[]} */\n      listServices,\n      /**@type {function():string[]} */\n      listEvents,\n      /**@type {string[]} */\n      sendQueue: [],\n      /**@type {number} */\n      sendQueueMax: 1000,\n\n      queueDepth () {\n        return this.sendQueue.length\n      },\n\n      enqueue (msg) {\n        this.sendQueue.push(msg)\n      },\n\n      dequeue () {\n        return this.sendQueue.shift()\n      },\n\n      /**\n       *\n       * @returns {ServiceMeshClient}\n       */\n      getClient () {\n        if (client) return client\n        client = new ServiceMeshClient(this)\n        return client\n      },\n\n      async connect (options) {\n        this.getClient().connect(options)\n      },\n\n      async publish (event) {\n        this.getClient().publish(event)\n      },\n\n      subscribe (eventName, handler) {\n        this.getClient().subscribe(eventName, handler)\n      },\n\n      async close (code, reason) {\n        this.getClient().close(code, reason)\n      }\n    }\n  }\n}\n","'use strict'\n\nexport default function makeAdapters (ports, adapters, services) {\n  if (!ports || !adapters) {\n    return\n  }\n  return Object.keys(ports)\n    .map(port => {\n      if (!adapters[port]) {\n        return\n      }\n\n      try {\n        return {\n          [port]: adapters[port](services[ports[port].service])\n        }\n      } catch (e) {\n        console.warn(e.message)\n      }\n    })\n    .reduce((p, c) => ({ ...p, ...c }))\n}\n"],"sourceRoot":""}