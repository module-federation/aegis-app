{"version":3,"sources":["webpack://aegis-app/./src/adapters/datasources/datasource-mongodb.js","webpack://aegis-app/./src/domain/config/index.js","webpack://aegis-app/./src/domain/config/inventory.js","webpack://aegis-app/./src/domain/config/webswitch.js","webpack://aegis-app/./src/domain/index.js","webpack://aegis-app/./src/domain/models/inventory.js","webpack://aegis-app/./src/domain/models/webswitch.js","webpack://aegis-app/./src/domain/util/bind-adapters.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","getSecret","process","env","MONGODB_CREDS","user","pass","token","archive","id","console","debug","DataSourceAdapterMongoDb","url","cacheSize","DataSourceMongoDb","DataSourceMongoDbArchive","_DataSourceMongoDb","_super","datasource","factory","name","_this","creds","_delete","Inventory","modelName","endpoint","dependencies","makeInventoryFactory","mixins","requireProperties","validateProperties","propKey","maxnum","values","categories","assetTypes","isValid","_obj","prop","every","properties","freezeProperties","relations","orders","type","foreignKey","desc","WebSwitch","makeClient","internal","ports","serviceLocatorInit","service","timeout","serviceLocatorAsk","serviceLocatorAnswer","websocketConnect","websocketPing","websocketSend","websocketClose","websocketStatus","websocketTerminate","websocketOnClose","websocketOnOpen","websocketOnMessage","websocketOnError","websocketOnPong","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","minLen","_arrayLikeToArray","n","toString","slice","Array","from","test","len","arr2","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","push","err","isArray","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","validateSpec","spec","missing","Error","concat","entries","makeModel","GlobalMixins","bindAdapters","adapters","services","models","modelSpecs","map","_ref","_ref2","k","v","category","price","discount","sku","purchaseOrder","vendor","inStock","assetType","quantity","freeze","_regeneratorRuntime","exports","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","Promise","iter","val","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","HOSTNAME","SERVICENAME","HBEATTIMEOUT","WSOCKETERROR","isPrimary","SWITCH","isBackup","BACKUP","DEBUG","heartbeatMs","sslEnabled","SSL_ENABLED","clearPort","PORT","cipherPort","SSL_PORT","activePort","activeProto","activeHost","DOMAIN","os","proto","SWITCH_PROTO","port","SWITCH_PORT","host","SWITCH_HOST","override","SWITCH_OVERRIDE","apiProto","apiUrl","serviceUrl","ServiceMeshClient","_EventEmitter","mesh","pong","heartbeatTimer","headers","pid","telemetry","eventName","hostname","role","memoryUsage","cpuUsage","performance","nodeTiming","listServices","events","listEvents","socketState","_resolveUrl","_callee","_callee$","_context","primary","backup","resolveUrl","_connect","_callee2","_this2","options","_args2","_callee2$","_context2","binary","agent","protocol","useBinary","log","send","heartbeat","setTimeout","sendQueuedMsgs","message","missingEventName","emit","listeners","listener","connect","code","reason","msg","clearTimeout","once","_this3","warn","_this4","nanoid","enqueue","queueDepth","dequeue","publish","subscribe","callback","on","_close","_callee3","_callee3$","_context3","save","removeAllListeners","close","_x2","EventEmitter","client","sendQueue","sendQueueMax","shift","getClient","_this5","_callee4","_callee4$","_context4","event","_this6","_callee5","_callee5$","_context5","handler","_this7","_callee6","_callee6$","_context6","makeAdapters","reduce","c"],"mappings":"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EAAE;MACfd,OAAO,EAAE,WAAW;MACpBR,IAAI,EAAE,UAAU;MAChBS,OAAO,EAAE;IACX;EACF;AACF,CAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;ACpFW;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","file":"929.js","sourcesContent":["'use strict'\n\nfunction getSecret () {\n  return process.env.MONGODB_CREDS || { user: null, pass: null, token: null }\n}\n\nfunction archive (id) {\n  console.debug('mock archive', id)\n}\n\n/**\n * Datasource adapter factory.\n * @param {string} url database url\n * @param {number} [cacheSize] number of models to keep in cache\n * @param {*} DataSource base class that enables caching\n * @returns {import(\"./datasource\").default}\n */\nexport const DataSourceAdapterMongoDb = function (\n  url,\n  cacheSize,\n  DataSourceMongoDb\n) {\n  /**\n   * MongoDB adapter extends in-memory datasource to support caching.\n   * The cache is always updated first, which allows the system to run\n   * even when the database is offline.\n   */\n  class DataSourceMongoDbArchive extends DataSourceMongoDb {\n    constructor (datasource, factory, name) {\n      super(datasource, factory, name)\n      this.url = url\n      this.cacheSize = cacheSize\n      this.creds = getSecret()\n    }\n\n    /**\n     * @override\n     */\n    delete (id) {\n      console.debug('archive', id)\n      archive(id)\n    }\n  }\n\n  return DataSourceMongoDbArchive\n}\n","export * from './webswitch' // always export this\n// export * from './order'\n// export * from './customer'\nexport * from './inventory'\n// export * from './todo'\n// export * from './user'\n// export * from './query-engine'\n// export * from './dam-api'\n// export * from './ticket-master'\n// export * from './access-controller'\n","'use strict'\n\nimport { DataSourceAdapterMongoDb } from '../../adapters/datasources/datasource-mongodb'\nimport {\n  makeInventoryFactory,\n  assetTypes,\n  properties,\n  categories\n} from '../models/inventory'\n\nimport {\n  requireProperties,\n  freezeProperties,\n  validateProperties\n} from '../util/mixins'\n\n/**\n * @type {import(\"../domain/order\").ModelSpecification}\n */\nexport const Inventory = {\n  modelName: 'inventory',\n  endpoint: 'inventory',\n  dependencies: {},\n  factory: makeInventoryFactory,\n  // datasource: {\n  //   factory: DataSourceAdapterMongoDb,\n  //   url: 'mongodb://127.0.0.1:27017',\n  //   cacheSize: 4000,\n  //   baseClass: 'DataSourceMongoDb'\n  // },\n  mixins: [\n    requireProperties('name', 'inStock', 'category', 'price', 'purchaseOrder'),\n    validateProperties([\n      {\n        propKey: 'inStock',\n        typeof: 'number',\n        maxnum: 99999\n      },\n      {\n        propKey: 'category',\n        values: categories\n      },\n      {\n        propKey: 'assetType',\n        values: assetTypes\n      },\n      {\n        propKey: 'properties',\n        isValid: (_obj, prop) => prop.every(p => properties.includes(p))\n      },\n      {\n        propKey: 'price',\n        typeof: 'number',\n        maxnum: 999.99\n      }\n    ]),\n    freezeProperties('*')\n  ],\n  relations: {\n    orders: {\n      modelName: 'order',\n      type: 'oneToMany',\n      foreignKey: 'itemId',\n      desc: 'many items per order'\n    }\n  }\n}\n","'use strict'\n\nimport { makeClient } from '../models/webswitch'\n\n/**\n * @type {import('../domain').ModelSpecification}\n */\nexport const WebSwitch = {\n  modelName: 'webswitch',\n  endpoint: 'appfabric',\n  factory: makeClient,\n  internal: true,\n  ports: {\n    serviceLocatorInit: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    serviceLocatorAsk: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    serviceLocatorAnswer: {\n      service: 'serviceLocator',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketConnect: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketPing: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketSend: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 3000\n    },\n    websocketClose: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketStatus: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketTerminate: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnClose: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnOpen: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnMessage: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnError: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    },\n    websocketOnPong: {\n      service: 'websocket',\n      type: 'outbound',\n      timeout: 0\n    }\n  }\n}\n","'use strict'\n\n/**\n * @typedef {string} eventName\n */\n\n/**\n * @typedef  Model\n * @property {string} _Symbol_id - immutable/private uuid\n * @property {string} _Symbol_modelName - immutable/private name\n * @property {string} _Symbol_createTime - immutable/private createTime\n * @property {onUpdate} _Symbol_onUpdate - immutable/private update function\n * @property {onDelete} _Symbol_onDelete\n * @property {function(Object)} update - use this function to update model\n * specify changes in an object\n * @property {function()} toJSON - de/serialization logic\n * @property {function(eventName,function(eventName,Model):void)} addListener listen for domain events\n * @property {function(eventName,Model):Promise<void>} emit emit domain event\n * @property {function(function():Promise<Model>):Promise<Model>} [port] - when a\n * port is configured, the framework generates a function to invoke it. When data\n * arrives on the port, depending on the implementation, the port's adapter invokes\n * the callback specified in the port configuration, or as an argument to the port\n * function. The callback returns an updated Model, and control is returned to the\n * caller. Optionally, an event is fired to trigger the next port function to run\n * @property {function():Promise<any>} [relation] - when you configure a relation,\n * the framework generates a function that your code can call to run the query\n * @property {function(*):*} [command] - the framework will call any model method\n * you specify when passed as a parameter or query in an API call.\n */\n\n/**\n * @callback onUpdate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onDelete\n * @param {Model} model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback validate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onLoad\n * @param {Model} savedModel rehydrated model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @typedef {string} service - name of the service object to inject in adapter\n * @typedef {number} timeout - call to adapter will timeout after `timeout` milliseconds\n *\n * @typedef {{\n *  [x: string]: {\n *    service: service,\n *    timeout?: timeout,\n *    callback?: function({model: Model})\n *    errorCallback?: function({model: Model, port: string, error:Error}),\n *    timeoutCallback?: function({model: Model, port: string}),\n *    consumesEvent?:string,\n *    producesEvent?:string,\n *    type?:'inbound'|'outbound',\n *    disabled?: boolean,\n *    adapter?: string,\n *    circuitBreaker?: thresholds\n *  }\n * }} ports - input/output ports for the domain\n */\n\n/**\n * @typedef {{\n *  [x:string]: {\n *    errorRate:number\n *    callVolume:number,\n *    intervalMs:number,\n *    fallbackFn:function()\n *  },\n * }} thresholds - thresholds for different errors\n */\n\n/**\n * @typedef {{\n *  [x: string]: {\n *    modelName:string,\n *    type:\"oneToMany\"|\"oneToOne\"|\"manyToOne\",\n *    foreignKey:any,\n *  }\n * }} relations - define related domain entities\n *\n * @typedef {Array<function({\n *  eventName:string,\n *  eventType:string,\n *  eventTime:string,\n *  modelName:string,\n *  model:Model\n * }):Promise<void>>} eventHandler - callbacks invoked to handle domain and\n * application events\n */\n\n/**\n *\n * @typedef {string} key\n * @typedef {*} value\n */\n\n/**\n * @typedef {{\n *  on: \"serialize\" | \"deserialize\",\n *  key: string | RegExp | \"*\" | (function(key,value):boolean)\n *  type: \"string\" | \"object\" | \"number\" | \"function\" | \"any\" | (function(key,value):boolean)\n *  value(key, value):value\n * }} serializer\n */\n/**\n * @typedef {{\n *  [x:string]: {\n *    allow:string|function(*):boolean|Array<string|function(*):boolean>\n *    deny:string|function(*):boolean|Array<string|function(*):boolean>\n *    type:\"role\"|\"relation\"|\"command\"\n *    desc?:string\n *  }\n * }} accessControlList\n */\n/**\n * @typedef {{\n *  [x: string]: {\n *    command:string|function(Model):Promise<any>,\n *    acl:accessControlList[]\n *  }\n * }} commands - configure functions to execute when specified in a\n * URL parameter or query of the auto-generate REST API\n */\n/**\n * @callback controller\n * @param {Request} req\n * @param {Response} res\n */\n\n/**\n * @typedef {{\n *  [path: string]: {\n *    get?: controller,\n *    post?: controller,\n *    patch?: controller,\n *    delete?:controller\n *   }\n * }} endpoints\n */\n\n/**\n * @callback modelSpecFactoryFn\n * @param {object} dependencies\n * @returns {function(...args):Readonly<object>}\n */\n\n/**\n * @typedef {object} ModelSpecification Specify domain model properties and functions\n * @property {string} modelName name of model (case-insenstive)\n * @property {string} endpoint URI reference (e.g. plural of `modelName` noun)\n * @property {modelSpecFactoryFn} factory returns factory function that creates the model instance\n * @property {object} [dependencies] injected into the model for inverted dependency/control\n * @property {Array<import(\"./util/mixins\").functionalMixin>} [mixins] - use functional mixins\n * to compose the object from common domain logic, like input validation.\n * @property {onUpdate} [onUpdate] - Function called to handle update requests. Called\n * before save.\n * @property {onDelete} [onDelete] - Function called before deletion.\n * @property {validate} [validate] - called to validate model updates\n * @property {ports} [ports] - input/output ports for the domain\n * @property {eventHandler[]} [eventHandlers] - callbacks invoked to handle CRUD events\n * @property {serializer[]} [serializers] - use for custom de/serialization of the model\n * when reading or writing to storage or network\n * @property {relations} [relations] - create related models or query in aggregate\n * @property {commands} [commands] - define functions to execute when specified in a\n * URL parameter or query of the auto-generated REST API\n * @property {accessControlList} [accessControlList] - configure authorization\n * @property {endpoints} [routes] - additional custom API endpoints - specify inbound port\n * @property {{factory:import(\"../adapters/datasources/datasource-mongodb\"),url:string,credentials?:string}} [datasource] - custom datasource\n * for this model. If not set, the default set by the server is used.\n *\n */\n\n/**\n * @callback addModel\n * @param {{ searchTerm1, searchTerm2, searchTermN }} input\n * @returns {Promise<Model>}\n */\n\n/**\n * @callback editModel\n * @param {{ id:string, changes:object }} input\n * @returns { Promise<Model> }\n */\n\n/**\n * @callback findModel\n * @param {{ id:string, query:object }} input\n * @returns { Promise<Model> }\n */\n\n/**\n * @callback findRelatedModels\n * @param {{ query:object, relation:string }} input\n * @returns { Promise<{Model,[Model]}> }\n */\n\n/**\n * @callback listModels\n * @param {{ query:object }} input e.g. { searchTerm1 : 'val', ...etc }\n * @returns { [Promise<Model>] }\n */\n\n/**\n * @callback executeCommand\n * @param {{ id:string }} input\n * @returns { Model }\n */\n\n/**\n * @typedef DomainPortAPI\n * @property { addModel } addModel\n * @property { editModel } editModel\n * @property { listModels } listModels\n * @property { findModel } findModel\n * @property { findRelatedModels } findModel\n * @property { removeModel } removeModel\n * @property { executeCommand } executeCommand\n */\n\nimport GlobalMixins from './util/mixins'\nimport bindAdapters from './util/bind-adapters'\n\n// Service dependencies\nimport * as services from '../services'\nimport * as adapters from '../adapters'\nimport * as ports from './ports'\n// Models\nimport * as modelSpecs from './config'\n\n/**\n *\n * @param {ModelSpecification} spec\n */\nfunction validateSpec (spec) {\n  const missing = ['endpoint', 'factory'].filter(key => !spec[key])\n  if (missing?.length > 0) {\n    throw new Error(\n      `missing properties: ${missing}, spec: ${Object.entries(spec)}`\n    )\n  }\n}\n\n/**\n * @param {ModelSpecification} spec\n * @param {*} dependencies - services injected\n */\nfunction makeModel (spec) {\n  validateSpec(spec)\n  const mixins = spec.mixins || []\n  const dependencies = spec.dependencies || {}\n  return {\n    ...spec,\n    mixins: mixins.concat(GlobalMixins),\n    dependencies: {\n      ...dependencies,\n      ...bindAdapters(spec.ports, adapters, services)\n    }\n  }\n}\n\nexport const models = Object.entries(modelSpecs).map(([k, v]) =>\n  makeModel({ ...v, modelName: k })\n)\n","'use strict'\n\nexport const assetTypes = ['rotating-asset', 'spare-part']\nexport const properties = ['height', 'length', 'width', 'weight', 'color']\nexport const categories = ['home', 'auto', 'business']\n\nexport const makeInventoryFactory = dependencies => ({\n  category,\n  properties,\n  price,\n  discount,\n  name,\n  desc,\n  sku,\n  purchaseOrder,\n  vendor,\n  inStock,\n  assetType,\n  quantity\n}) =>\n  Object.freeze({\n    category,\n    properties,\n    price: price - (discount || 0.0),\n    name,\n    desc,\n    sku,\n    purchaseOrder,\n    vendor,\n    inStock,\n    assetType,\n    quantity\n  })\n","/**\n * webswitch (c)\n *\n * Websocket clients connect to a common ws server,\n * called a webswitch. When a client sends a message,\n * webswitch broadcasts the message to all other\n * connected clients, including a special webswitch\n * server that acts as an uplink to another network,\n * if one is defined. A Webswitch server can also\n * receive messgages from an uplink and will broadcast\n * those messages to its clients as well.\n */\n\n'use strict'\n\nimport os from 'os'\nimport EventEmitter from 'events'\nimport { nanoid } from 'nanoid'\n\nconst HOSTNAME = 'webswitch.local'\nconst SERVICENAME = 'webswitch'\nconst HBEATTIMEOUT = 'heartBeatTimeout'\nconst WSOCKETERROR = 'webSocketError'\n\nconst isPrimary = /true/i.test(process.env.SWITCH)\nconst isBackup = /true/i.test(process.env.BACKUP)\nconst debug = /true/i.test(process.env.DEBUG)\nconst heartbeatMs = 10000\nconst sslEnabled = /true/i.test(process.env.SSL_ENABLED)\nconst clearPort = process.env.PORT || 80\nconst cipherPort = process.env.SSL_PORT || 443\nconst activePort = sslEnabled ? cipherPort : clearPort\nconst activeProto = sslEnabled ? 'wss' : 'ws'\nconst activeHost = process.env.DOMAIN || os.hostname()\nconst proto = isPrimary ? activeProto : process.env.SWITCH_PROTO\nconst port = isPrimary ? activePort : process.env.SWITCH_PORT\nconst host = isPrimary ? activeHost : process.env.SWITCH_HOST\nconst override = /true/i.test(process.env.SWITCH_OVERRIDE)\nconst apiProto = sslEnabled ? 'https' : 'http'\nconst apiUrl = `${apiProto}://${activeHost}:${activePort}`\n\nfunction serviceUrl () {\n  const url = `${proto}://${host}:${port}`\n  if (proto && host && port) return url\n  if (isPrimary) throw new Error(`invalid url ${url}`)\n  return null\n}\n\n/**\n * Service mesh client impl. Uses websocket and service-locator\n * adapters through ports injected into the {@link mesh} model.\n * Cf. modelSpec by the same name, i.e. `webswitch`.\n */\nexport class ServiceMeshClient extends EventEmitter {\n  /**\n   * The model is passed as the only arg.\n   *\n   * @param {import('../../domain').Model} mesh the domain model\n   */\n  constructor (mesh) {\n    super('webswitch')\n    this.url\n    this.mesh = mesh\n    this.name = SERVICENAME\n    this.isPrimary = isPrimary\n    this.isBackup = isBackup\n    this.pong = true\n    this.heartbeatTimer = 3000\n    this.headers = {\n      'x-webswitch-host': os.hostname(),\n      'x-webswitch-role': 'node',\n      'x-webswitch-pid': process.pid\n    }\n  }\n\n  /**\n   *\n   * @param {number} asyncId id's instance to kill\n   * @returns {{telemetry:{mem:number,cpu:number}}}\n   */\n  telemetry () {\n    return {\n      eventName: 'telemetry',\n      proto: this.name,\n      apiUrl,\n      heartbeatMs,\n      hostname: os.hostname(),\n      role: 'node',\n      pid: process.pid,\n      telemetry: {\n        ...process.memoryUsage(),\n        ...process.cpuUsage(),\n        ...performance.nodeTiming\n      },\n      services: this.mesh.listServices(),\n      events: this.mesh.listEvents(),\n      socketState: this.mesh.websocketStatus() || 'undefined'\n    }\n  }\n\n  /**\n   * Zero-config, self-forming mesh network:\n   * Discover URL of broker to connect to, or\n   * if this is the broker, cast the local url\n   * @returns {Promise<string>} url\n   */\n  async resolveUrl () {\n    await this.mesh.serviceLocatorInit({\n      serviceUrl: serviceUrl(),\n      name: this.name,\n      primary: this.isPrimary,\n      backup: this.isBackup\n    })\n    if (this.isPrimary) {\n      await this.mesh.serviceLocatorAnswer()\n      return serviceUrl()\n    }\n    return override ? serviceUrl() : this.mesh.serviceLocatorAsk()\n  }\n\n  /**\n   * Use multicast dns to resolve broker url. Connect to\n   * service mesh broker. Allow listeners to subscribe to\n   * indivdual or all events. Send binary messages with\n   * protocol and idempotentency headers. Periodically send\n   * telemetry data.\n   *\n   * @param {*} options\n   * @returns\n   */\n  async connect (options = { binary: true }) {\n    this.options = options\n    this.url = await this.resolveUrl()\n\n    this.mesh.websocketConnect(this.url, {\n      agent: false,\n      headers: this.headers,\n      protocol: SERVICENAME,\n      useBinary: options.binary\n    })\n\n    this.mesh.websocketOnOpen(() => {\n      console.log('connection open')\n      this.send(this.telemetry())\n      this.heartbeat()\n      setTimeout(() => this.sendQueuedMsgs(), 3000)\n    })\n\n    this.mesh.websocketOnMessage(message => {\n      if (!message.eventName) {\n        debug && console.debug({ missingEventName: message })\n        this.emit('missingEventName', message)\n        return\n      }\n      try {\n        this.emit(message.eventName, message)\n        this.listeners('*').forEach(listener => listener(message))\n      } catch (error) {\n        console.error({ fn: this.connect.name, error })\n      }\n    })\n\n    this.mesh.websocketOnError(error => {\n      this.emit(WSOCKETERROR, error)\n      console.error({ fn: this.connect.name, error })\n    })\n\n    this.mesh.websocketOnClose((code, reason) => {\n      console.log({\n        msg: 'received close frame',\n        code,\n        reason: reason?.toString()\n      })\n      clearTimeout(this.heartbeatTimer)\n      setTimeout(() => {\n        console.debug('reconnect due to socket close')\n        this.connect()\n      }, 5000)\n    })\n\n    this.mesh.websocketOnPong(() => (this.pong = true))\n    this.once('timeout', this.timeout)\n  }\n\n  timeout () {\n    console.warn('timeout')\n    this.emit(HBEATTIMEOUT, this.telemetry())\n    this.mesh.websocketTerminate()\n    setTimeout(() => {\n      console.debug('reconnect due to timeout')\n      this.connect()\n    }, 5000)\n  }\n\n  heartbeat () {\n    if (this.pong) {\n      this.pong = false\n      this.mesh.websocketPing()\n      this.heartbeatTimer = setTimeout(() => this.heartbeat(), heartbeatMs)\n    } else {\n      clearTimeout(this.heartbeatTimer)\n      this.emit('timeout')\n    }\n  }\n\n  /**\n   * Convert message to binary and send with protocol and idempotency headers.\n   * If message cannot be sent because of connection state or buffering queue\n   * message in domain object for retry later. Using a domain object ensures\n   * persistence of the queue across boots.\n   *\n   * @param {object} msg\n   * @returns {Promise<boolean>} true if sent, false if not\n   */\n  send (msg) {\n    const sent = this.mesh.websocketSend(msg, {\n      headers: {\n        ...this.headers,\n        'idempotency-key': nanoid()\n      }\n    })\n    if (sent) return true\n    this.mesh.enqueue(msg)\n    return false\n  }\n\n  /**\n   * Send any messages buffered in `sendQueue`.\n   */\n  sendQueuedMsgs () {\n    let sent = true\n    while (this.mesh.queueDepth() > 0 && sent)\n      sent = this.send(this.mesh.dequeue())\n  }\n\n  /**\n   * Sends message to mesh broker service.\n   * @param {*} msg\n   */\n  publish (msg) {\n    return this.send(msg)\n  }\n\n  /**\n   * Register handler to fire on event\n   * @param {string} eventName\n   * @param {function()} callback\n   */\n  subscribe (eventName, callback) {\n    this.on(eventName, callback)\n  }\n\n  /**\n   * A new object will be created on system reload.\n   * Dispose of the old one. Run in context to\n   * distinguish between the new and old instance.\n   *\n   * @param {*} code\n   * @param {*} reason\n   */\n  async close (code, reason) {\n    console.debug('closing socket')\n    await this.mesh.save() // save queued messages\n    this.removeAllListeners()\n    this.mesh.websocketClose(code, reason)\n  }\n}\n\n/**\n * @typedef {{\n *   senderQueue:string[],\n *   queueDepth:function():number,\n *   connect:function(),\n *   close:function(),\n *   publish(object),\n *   enqueue:function(string),\n *   dequeue:function(),\n *   subscribe:function(string,function())\n * }} serviceMeshIface\n */\n\n/**\n * Domain model factory function. This model is\n * used internally by the Aegis framework as a\n * pluggable service mesh client. Implement the\n * the methods below to create a new plugin.\n *\n * @param {*} dependencies injected depedencies\n * @returns {function({function():string[],function():string[]}):serviceMeshIface}\n */\nexport function makeClient (dependencies) {\n  let client\n  return function ({ listServices, listEvents }) {\n    return {\n      /**@type {function():string[]} */\n      listServices,\n      /**@type {function():string[]} */\n      listEvents,\n      /**@type {string[]} */\n      sendQueue: [],\n      /**@type {number} */\n      sendQueueMax: 1000,\n\n      queueDepth () {\n        return this.sendQueue.length\n      },\n\n      enqueue (msg) {\n        this.sendQueue.push(msg)\n      },\n\n      dequeue () {\n        return this.sendQueue.shift()\n      },\n\n      /**\n       *\n       * @returns {ServiceMeshClient}\n       */\n      getClient () {\n        if (client) return client\n        client = new ServiceMeshClient(this)\n        return client\n      },\n\n      async connect (options) {\n        this.getClient().connect(options)\n      },\n\n      async publish (event) {\n        this.getClient().publish(event)\n      },\n\n      subscribe (eventName, handler) {\n        this.getClient().subscribe(eventName, handler)\n      },\n\n      async close (code, reason) {\n        this.getClient().close(code, reason)\n      }\n    }\n  }\n}\n","'use strict'\n\nexport default function makeAdapters (ports, adapters, services) {\n  if (!ports || !adapters) {\n    return\n  }\n  return Object.keys(ports)\n    .map(port => {\n      if (!adapters[port]) {\n        return\n      }\n\n      try {\n        return {\n          [port]: adapters[port](services[ports[port].service])\n        }\n      } catch (e) {\n        console.warn(e.message)\n      }\n    })\n    .reduce((p, c) => ({ ...p, ...c }))\n}\n"],"sourceRoot":""}